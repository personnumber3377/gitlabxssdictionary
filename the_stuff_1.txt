renderer_spec.rb:        it "skips database caching on a GitLab read-only instance" do
renderer_spec.rb:      expect(cache_key).to eq ["banzai", "my_cache_key", :emoji, markdown_version]
renderer_spec.rb:      expect(cache_key).to eq ["banzai", "my_cache_key", :full, markdown_version]
object_renderer_spec.rb:  let(:object) { Note.new(note: 'hello', note_html: '<p dir="auto">hello</p>', cached_markdown_version: Gitlab::MarkdownCache::CACHE_COMMONMARK_VERSION_SHIFTED) }
object_renderer_spec.rb:        expect(object.redacted_note_html).to eq '<p dir="auto">hello</p>'
object_renderer_spec.rb:          thing.title = "Merge branch 'branch-merged' into 'master'"
object_renderer_spec.rb:        expect(cacheless_thing.redacted_title_html).to eq("Merge branch 'branch-merged' into 'master'")
pipeline_spec.rb:        'unsupported pipeline name "label" (String)'
issuable_extractor_spec.rb:      "<a href='' data-issue='#{issue.id}' data-reference-type='issue' class='gfm'>text</a>"
issuable_extractor_spec.rb:      "<a href='' data-work-item='#{work_item.id}' data-reference-type='work_item' class='gfm'>text</a>"
issuable_extractor_spec.rb:      "<a href='' data-work-item='#{group_work_item.id}' data-reference-type='work_item' class='gfm'>text</a>"
issuable_extractor_spec.rb:      "<a href='' data-merge-request='#{merge_request.id}' data-reference-type='merge_request' class='gfm'>text</a>"
extract_dictionary.py:	fh = open("the_stuff_1.txt", "r")
extract_dictionary.py:	matches = re.findall(r'"(.*?)"', data) # Extract the stuff from the thing...
extract_dictionary.py:		print(f'"{s}"')
extract_dictionary.py:if __name__=="__main__":
reference_parser/label_parser_spec.rb:      it_behaves_like "referenced feature visibility", "issues", "merge_requests"
reference_parser/commit_range_parser_spec.rb:      it_behaves_like "referenced feature visibility", "repository"
reference_parser/commit_range_parser_spec.rb:      Nokogiri::HTML.fragment(%(<a data-commit-range="123...456" data-project="#{project.id}"></a>)).children[0]
reference_parser/issue_parser_spec.rb:      it_behaves_like "referenced feature visibility", "issues"
reference_parser/issue_parser_spec.rb:      Nokogiri::HTML.fragment(%(<a data-issue="#{issue.id}"></a>)).children[0]
reference_parser/work_item_parser_spec.rb:      Nokogiri::HTML.fragment(%(<a data-work-item="#{work_item.id}"></a>)).children[0]
reference_parser/merge_request_parser_spec.rb:      it_behaves_like "referenced feature visibility", "merge_requests"
reference_parser/merge_request_parser_spec.rb:      Nokogiri::HTML.fragment(%(<a data-project="#{merge_request.project_id}" data-merge-request="#{merge_request.id}"></a>)).children[0]
reference_parser/base_parser_spec.rb:          links = Nokogiri::HTML.fragment("<a data-foo='#{user.id}'></a>")
reference_parser/base_parser_spec.rb:          links = Nokogiri::HTML.fragment("<a data-foo='1'></a><a data-foo='2'></a>").children
reference_parser/base_parser_spec.rb:            links = Nokogiri::HTML.fragment("no links").children
reference_parser/base_parser_spec.rb:        links = Nokogiri::HTML.fragment('<a data-foo="1"></a>').children
reference_parser/base_parser_spec.rb:      link = Nokogiri::HTML.fragment('<a data-project="1" data-foo="2"></a>')
reference_parser/base_parser_spec.rb:      <a class="gfm">one</a>
reference_parser/base_parser_spec.rb:      <a class="gfm" data-reference-type="test">two</a>
reference_parser/base_parser_spec.rb:      <a class="gfm" data-reference-type="other">three</a>
reference_parser/base_parser_spec.rb:      <a class="gfm" data-reference-type="test">four</a>
reference_parser/milestone_parser_spec.rb:      it_behaves_like "referenced feature visibility", "issues", "merge_requests"
reference_parser/feature_flag_parser_spec.rb:      it_behaves_like "referenced feature visibility", "issues", "merge_requests" do
reference_parser/commit_parser_spec.rb:      it_behaves_like "referenced feature visibility", "repository"
reference_parser/commit_parser_spec.rb:      stub_const("#{described_class}::COMMITS_LIMIT", 1)
reference_parser/commit_parser_spec.rb:        "b83d6e391c22777fca1ed3012fce84f633d7fed0"
reference_parser/commit_parser_spec.rb:      Nokogiri::HTML.fragment(%(<a data-commit="#{project.commit.id}" data-project="#{project.id}"></a>)).children[0]
reference_parser/alert_parser_spec.rb:      it_behaves_like "referenced feature visibility", "issues", "merge_requests" do
reference_parser/external_issue_parser_spec.rb:        it "creates reference when the feature is #{level}" do
pipeline/single_line_markdown_pipeline_spec.rb:    expected = "Hello world!  \n \n item one \n item two \n \n \n number one \n number two \n \n <code>x = 1\n</code>"
pipeline/single_line_markdown_pipeline_spec.rb:    expect(result).to include('<a href="http://example.com"')
pipeline/single_line_markdown_pipeline_spec.rb:    text = "Issue #{issue.to_reference}, User #{user.to_reference}"
pipeline/single_line_markdown_pipeline_spec.rb:    expect(result).to include('data-reference-type="issue"')
pipeline/single_line_markdown_pipeline_spec.rb:    expect(result).to include('data-reference-type="user"')
pipeline/single_line_markdown_pipeline_spec.rb:    text = "Issue `#{issue.to_reference}`, User `#{user.to_reference}`"
pipeline/single_line_markdown_pipeline_spec.rb:    expect(result).not_to include('data-reference-type="issue"')
pipeline/single_line_markdown_pipeline_spec.rb:    expect(result).not_to include('data-reference-type="user"')
pipeline/plain_markdown_pipeline_spec.rb:      let(:input) { "Include this:\n\n::include{file=#{include_path}}" }
pipeline/plain_markdown_pipeline_spec.rb:            context "when the file is specified by #{desc}" do
pipeline/plain_markdown_pipeline_spec.rb:                create_and_delete_files(project, { file_path => "Content from #{include_path}" }, branch_name: 'markdown') do
pipeline/plain_markdown_pipeline_spec.rb:                is_expected.to include("<p>Content from #{include_path}</p>")
pipeline/plain_markdown_pipeline_spec.rb:          expect(output.gsub(/<[^>]+>/, '').gsub(/\n\s*/, "\n").strip).to eq <<~MD.strip
pipeline/plain_markdown_pipeline_spec.rb:            expect(output.gsub(/<[^>]+>/, '').gsub(/\n\s*/, "\n").strip).to eq <<~MD.strip
pipeline/plain_markdown_pipeline_spec.rb:          message: "Add #{path}", branch_name: 'markdown')
pipeline/plain_markdown_pipeline_spec.rb:        repository.delete_file(project.creator, path, message: "Delete #{path}", branch_name: 'markdown')
pipeline/plain_markdown_pipeline_spec.rb:        %(Error including '<a href="#{filename}">#{filename}</a>' : #{reason})
pipeline/plain_markdown_pipeline_spec.rb:          expect(output).to include("<span data-escaped-char>#{char}</span>")
pipeline/plain_markdown_pipeline_spec.rb:          expect(output).not_to include("<span data-escaped-char>#{char}</span>")
pipeline/plain_markdown_pipeline_spec.rb:      markdown = %q(\"\'\*\+\,\-\.\/\:\;\<\=\>\?\[\]\`\|) + %q[\(\)\\\\]
pipeline/plain_markdown_pipeline_spec.rb:        %q($1+\$2$)                      | %q(<code data-math-style="inline">1+\\$2</code>)
pipeline/plain_markdown_pipeline_spec.rb:        %q(<http://example.com?find=\@>) | %q(<a href="http://example.com?find=%5C@">http://example.com?find=\@</a>)
pipeline/plain_markdown_pipeline_spec.rb:        %q[<a href="/bar\@)">]           | %q[<a href="/bar\@)">]
pipeline/plain_markdown_pipeline_spec.rb:        correct_html_included(markdown, %(<pre lang="foo@bar"><code>foo\n</code></pre>), context)
pipeline/plain_markdown_pipeline_spec.rb:        %q![foo](/bar\@ "\@title")! | %q(<a href="/bar@" title="@title">foo</a>)
pipeline/plain_markdown_pipeline_spec.rb:        %([foo]\n\n[foo]: /bar\\@ "\\@title") | %q(<a href="/bar@" title="@title">foo</a>)
pipeline/plain_markdown_pipeline_spec.rb:      markdown = "x \\#\n\n#{'mliteralcmliteral-' * 450000}mliteral"
pipeline/pre_process_pipeline_spec.rb:      expect(result[:output]).not_to include "\xEF\xBB\xBF"
pipeline/pre_process_pipeline_spec.rb:      expect(result[:output]).to include "```yaml:frontmatter\nfoo: :foo_symbol\n"
pipeline/quick_action_pipeline_spec.rb:      <p data-sourcepos="0:1-2:10">
pipeline/single_line_pipeline_spec.rb:    expect(result).to include('<a href="http://example.com"')
pipeline/single_line_pipeline_spec.rb:    text = "Issue #{issue.to_reference}, User #{user.to_reference}"
pipeline/single_line_pipeline_spec.rb:    expect(result).to include('data-reference-type="issue"')
pipeline/single_line_pipeline_spec.rb:    expect(result).to include('data-reference-type="user"')
pipeline/full_pipeline_spec.rb:      markdown = "[some `code` inside](#{issue.to_reference})"
pipeline/full_pipeline_spec.rb:      markdown = "[#{link_label}](#{issue.to_reference})"
pipeline/full_pipeline_spec.rb:        <a href="#{reference_link}<i>
pipeline/full_pipeline_spec.rb:        </i>">#{reference_link}<i>
pipeline/full_pipeline_spec.rb:        <a alt='"#{reference_link}'></a></i></a>
pipeline/full_pipeline_spec.rb:      markdown.delete!("\n")
pipeline/full_pipeline_spec.rb:      expect(result).to include "<a alt='\"#{reference_link}'></a>"
pipeline/full_pipeline_spec.rb:      markdown = %{[">bad things](#{issue.to_reference})}
pipeline/full_pipeline_spec.rb:      expect(result).to include(%(data-original='\"&amp;gt;bad things'))
pipeline/full_pipeline_spec.rb:        <p dir="auto">first<sup class="footnote-ref"><a href="#fn-1-#{identifier}" id="fnref-1-#{identifier}" data-footnote-ref>1</a></sup> and second<sup class="footnote-ref"><a href="#fn-%F0%9F%98%84second-#{identifier}" id="fnref-%F0%9F%98%84second-#{identifier}" data-footnote-ref>2</a></sup> and twenty<sup class="footnote-ref"><a href="#fn-_twenty-#{identifier}" id="fnref-_twenty-#{identifier}" data-footnote-ref>3</a></sup></p>
pipeline/full_pipeline_spec.rb:        <section data-footnotes class="footnotes">
pipeline/full_pipeline_spec.rb:        <li id="fn-1-#{identifier}">
pipeline/full_pipeline_spec.rb:        <p>one <a href="#fnref-1-#{identifier}" data-footnote-backref data-footnote-backref-idx="1" aria-label="Back to reference 1" title="Back to reference 1" class="footnote-backref">↩</a></p>
pipeline/full_pipeline_spec.rb:        <li id="fn-%F0%9F%98%84second-#{identifier}">
pipeline/full_pipeline_spec.rb:        <p>two <a href="#fnref-%F0%9F%98%84second-#{identifier}" data-footnote-backref data-footnote-backref-idx="2" aria-label="Back to reference 2" title="Back to reference 2" class="footnote-backref">↩</a></p>
pipeline/full_pipeline_spec.rb:        <li id="fn-_twenty-#{identifier}">
pipeline/full_pipeline_spec.rb:        <p>twenty <a href="#fnref-_twenty-#{identifier}" data-footnote-backref data-footnote-backref-idx="3" aria-label="Back to reference 3" title="Back to reference 3" class="footnote-backref">↩</a></p>
pipeline/full_pipeline_spec.rb:      expect(html.lines.map(&:strip).join("\n")).to eq filtered_footnote.strip
pipeline/full_pipeline_spec.rb:        expect(output).to include("<ul class=\"section-nav\">")
pipeline/full_pipeline_spec.rb:        expect(output).to include("<li><a href=\"#header\">Header</a></li>")
pipeline/full_pipeline_spec.rb:        expect(output).to include("test #{tag_html}")
pipeline/full_pipeline_spec.rb:      it_behaves_like 'table of contents tag', '[[_TOC_]]', '<a href="_TOC_" data-wikilink="true">_TOC_</a>'
pipeline/full_pipeline_spec.rb:      markdown = "\\#{issue.to_reference}"
pipeline/full_pipeline_spec.rb:      expect(output).to include("<span data-escaped-char>#</span>#{issue.iid}")
pipeline/full_pipeline_spec.rb:        # true   | 'a~bug'      | '~"a\~bug"'
pipeline/full_pipeline_spec.rb:        # true   | 'b~~bug~~'   | '~"b\~\~bug\~\~"'
pipeline/full_pipeline_spec.rb:        true   | 'd _bug_'    | '~"d \_bug\_"'
pipeline/full_pipeline_spec.rb:        true   | 'e*bug*'     | '~"e\*bug\*"'
pipeline/full_pipeline_spec.rb:        true   | 'f *bug*'    | '~"f \*bug\*"'
pipeline/full_pipeline_spec.rb:        true   | 'f *bug*'    | 'Label ~"f \*bug\*" **with** more text'
pipeline/full_pipeline_spec.rb:        true   | 'g`bug`'     | '~"g\`bug\`" '
pipeline/full_pipeline_spec.rb:        true   | 'h `bug`'    | '~"h \`bug\`"'
pipeline/full_pipeline_spec.rb:    let_it_be(:markdown2) { "$1$\n" * 190000 }
pipeline/full_pipeline_spec.rb:    let_it_be(:markdown3) { "[^1]\n[^1]:\n" * 100000 }
pipeline/full_pipeline_spec.rb:    let_it_be(:markdown4) { "[](a)" * 190000 }
pipeline/full_pipeline_spec.rb:    let_it_be(:markdown5) { "|x|x|x|x|x|\n-|-|-|-|-|\n|a|\n|a|\n|a|\n" * 6900 }
pipeline/full_pipeline_spec.rb:    let_it_be(:markdown6) { "`a^2+b^2=c^2` + " * 56000 }
pipeline/full_pipeline_spec.rb:      "'![a ' * 3"                                        | ref(:markdown1)
pipeline/full_pipeline_spec.rb:      '"$1$\n" * 190000'                                  | ref(:markdown2)
pipeline/full_pipeline_spec.rb:      '"[^1]\n[^1]:\n" * 100000'                          | ref(:markdown3)
pipeline/full_pipeline_spec.rb:      '"[](a)" * 190000'                                  | ref(:markdown4)
pipeline/full_pipeline_spec.rb:      '"|x|x|x|x|x|\n-|-|-|-|-|\n|a|\n|a|\n|a|\n" * 6900' | ref(:markdown5)
pipeline/full_pipeline_spec.rb:      '"`a^2+b^2=c^2` + " * 56000'                        | ref(:markdown5)
pipeline/full_pipeline_spec.rb:      "':y: ' * 190000"                                   | ref(:markdown7)
pipeline/full_pipeline_spec.rb:      "'<img>' * 100000"                                  | ref(:markdown8)
pipeline/full_pipeline_spec.rb:        'diagram.puml' => "@startuml\nBob -> Sara : Hello\n@enduml",
pipeline/full_pipeline_spec.rb:        'code.yaml' => "---\ntest: true"
pipeline/full_pipeline_spec.rb:      stub_application_setting(plantuml_enabled: true, plantuml_url: "http://localhost:8080")
pipeline/full_pipeline_spec.rb:      is_expected.to include '<span class="na">test</span>'
pipeline/full_pipeline_spec.rb:      is_expected.to include '<span class="kc">true</span>'
pipeline/full_pipeline_spec.rb:      "$[(a+b)c](d+e)$",
pipeline/full_pipeline_spec.rb:      it "when using '#{input}' as input" do
pipeline/commit_description_pipeline_spec.rb:      expect(result[:output].to_html).to include("</a>)\n\nCo-authored-by")
pipeline/emoji_pipeline_spec.rb:    expected_result = "Hello world #{Gitlab::Emoji.gl_emoji_tag(emoji)}"
pipeline/emoji_pipeline_spec.rb:    expected_result = "Hello &lt;b&gt;world&lt;/b&gt; #{Gitlab::Emoji.gl_emoji_tag(emoji)}"
pipeline/post_process_pipeline_spec.rb:        <a href="/uploads/e90decf88d8f96fe9e1389afc2e4a91f/test.jpg">Relative Upload Link</a>
pipeline/post_process_pipeline_spec.rb:        <img src="/uploads/e90decf88d8f96fe9e1389afc2e4a91f/test.jpg">
pipeline/post_process_pipeline_spec.rb:        <a href="/uploads/e90decf88d8f96fe9e1389afc2e4a91f/test.jpg">Relative Upload Link</a>
pipeline/post_process_pipeline_spec.rb:        <img src="/uploads/e90decf88d8f96fe9e1389afc2e4a91f/test.jpg">
pipeline/post_process_pipeline_spec.rb:        <a href="/test.jpg">Just a link</a>
pipeline/gfm_pipeline_spec.rb:          markdown = "text #{issue.to_reference(project, full: true)}"
pipeline/gfm_pipeline_spec.rb:        markdown = "text #{issue.to_reference(project, full: true)}"
pipeline/gfm_pipeline_spec.rb:      markdown = "[Link to Page](page slug)"
pipeline/gfm_pipeline_spec.rb:      expect(output).to include("href=\"page%20slug\"")
pipeline/gfm_pipeline_spec.rb:      markdown = "![My Image](test image.png)"
pipeline/gfm_pipeline_spec.rb:      expect(output).to include("src=\"test%20image.png\"")
pipeline/gfm_pipeline_spec.rb:      markdown_xss = "[xss](javascript: alert%28document.domain%29)"
pipeline/gfm_pipeline_spec.rb:      expect(output).not_to include("javascript")
pipeline/gfm_pipeline_spec.rb:      markdown_xss = "<invalidtag>\n[xss](javascript:alert%28document.domain%29)"
pipeline/gfm_pipeline_spec.rb:      expect(output).not_to include("javascript")
pipeline/gfm_pipeline_spec.rb:      output = described_class.to_html("#{Label.reference_prefix}\"#{emoji}\"", project: project)
pipeline/gfm_pipeline_spec.rb:      output = described_class.to_html("#{Milestone.reference_prefix}\"#{emoji}\"", project: project)
pipeline/broadcast_message_pipeline_spec.rb:  context "allows `a` elements" do
pipeline/broadcast_message_pipeline_spec.rb:    let(:exp) { "<a>Link</a>" }
pipeline/broadcast_message_pipeline_spec.rb:    it { is_expected.to eq("<p>#{exp}</p>") }
pipeline/broadcast_message_pipeline_spec.rb:  context "allows `br` elements" do
pipeline/broadcast_message_pipeline_spec.rb:    let(:exp) { "Hello<br>World" }
pipeline/broadcast_message_pipeline_spec.rb:    it { is_expected.to eq("<p>#{exp}</p>") }
pipeline/description_pipeline_spec.rb:    output.gsub!(%r{\A<p dir="auto">(.*)</p>(.*)\z}, '\1\2') if unwrap
pipeline/description_pipeline_spec.rb:    it "removes '#{elem}' elements" do
pipeline/description_pipeline_spec.rb:      act = "<#{elem}>Description</#{elem}>"
pipeline/description_pipeline_spec.rb:    it "still allows '#{elem}' elements" do
pipeline/description_pipeline_spec.rb:      exp = act = "<#{elem}>Description</#{elem}>"
pipeline/description_pipeline_spec.rb:  it "still allows 'p' elements" do
pipeline/description_pipeline_spec.rb:    exp = act = "<p dir=\"auto\">Description</p>"
pipeline/wiki_pipeline_spec.rb:  describe "Links" do
pipeline/wiki_pipeline_spec.rb:        describe "linking to pages within the wiki" do
pipeline/wiki_pipeline_spec.rb:          context "when creating hierarchical links to the current directory" do
pipeline/wiki_pipeline_spec.rb:            it "rewrites non-file links to be at the scope of the current directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Page](./page)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/twice/page\"")
pipeline/wiki_pipeline_spec.rb:            it "rewrites file links to be at the scope of the current directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](./page.md)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/twice/page.md\"")
pipeline/wiki_pipeline_spec.rb:          context "when creating hierarchical links to the parent directory" do
pipeline/wiki_pipeline_spec.rb:            it "rewrites non-file links to be at the scope of the parent directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](../page)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/page\"")
pipeline/wiki_pipeline_spec.rb:            it "rewrites file links to be at the scope of the parent directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](../page.md)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/page.md\"")
pipeline/wiki_pipeline_spec.rb:          context "when creating hierarchical links to a sub-directory" do
pipeline/wiki_pipeline_spec.rb:            it "rewrites non-file links to be at the scope of the sub-directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](./subdirectory/page)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/twice/subdirectory/page\"")
pipeline/wiki_pipeline_spec.rb:            it "rewrites file links to be at the scope of the sub-directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](./subdirectory/page.md)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/twice/subdirectory/page.md\"")
pipeline/wiki_pipeline_spec.rb:          describe "when creating non-hierarchical links" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](page)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/page\"")
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](page slug)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/page%20slug\"")
pipeline/wiki_pipeline_spec.rb:            it "rewrites file links to be at the scope of the current directory" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](page.md)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/nested/twice/page.md\"")
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/start-page#title\"")
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/start%20page#title\"")
pipeline/wiki_pipeline_spec.rb:          describe "when creating root links" do
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](/page)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/page\"")
pipeline/wiki_pipeline_spec.rb:              markdown = "[Link to Page](/page.md)"
pipeline/wiki_pipeline_spec.rb:              expect(output).to include("href=\"#{relative_url_root}/#{project.full_path}/-/wikis/page.md\"")
pipeline/wiki_pipeline_spec.rb:        describe "linking to pages outside the wiki (absolute)" do
pipeline/wiki_pipeline_spec.rb:          it "doesn't rewrite links" do
pipeline/wiki_pipeline_spec.rb:            markdown = "[Link to Page](http://example.com/page)"
pipeline/wiki_pipeline_spec.rb:            expect(output).to include('href="http://example.com/page"')
pipeline/wiki_pipeline_spec.rb:    describe "checking slug validity when assembling links" do
pipeline/wiki_pipeline_spec.rb:      context "with a valid slug" do
pipeline/wiki_pipeline_spec.rb:        let(:valid_slug) { "http://example.com" }
pipeline/wiki_pipeline_spec.rb:        it "includes the slug in a (.) relative link" do
pipeline/wiki_pipeline_spec.rb:            "[Link](./alert(1);)",
pipeline/wiki_pipeline_spec.rb:        it "includeds the slug in a (..) relative link" do
pipeline/wiki_pipeline_spec.rb:            "[Link](../alert(1);)",
pipeline/wiki_pipeline_spec.rb:      context "when the slug is deemed unsafe or invalid" do
pipeline/wiki_pipeline_spec.rb:          "javascript:",
pipeline/wiki_pipeline_spec.rb:          "JaVaScRiPt:",
pipeline/wiki_pipeline_spec.rb:          "\u0001java\u0003script:",
pipeline/wiki_pipeline_spec.rb:          "javascript    :",
pipeline/wiki_pipeline_spec.rb:          "javascript:    ",
pipeline/wiki_pipeline_spec.rb:          "javascript    :   ",
pipeline/wiki_pipeline_spec.rb:          ":javascript:",
pipeline/wiki_pipeline_spec.rb:          "javascript&#58;",
pipeline/wiki_pipeline_spec.rb:          "javascript&#0058;",
pipeline/wiki_pipeline_spec.rb:          "javascript&#x3A;",
pipeline/wiki_pipeline_spec.rb:          "javascript&#x003A;",
pipeline/wiki_pipeline_spec.rb:          "java\0script:",
pipeline/wiki_pipeline_spec.rb:          " &#14;  javascript:"
pipeline/wiki_pipeline_spec.rb:          "alert(1);",
pipeline/wiki_pipeline_spec.rb:          "alert(document.location);"
pipeline/wiki_pipeline_spec.rb:          context "with the invalid slug #{slug.delete("\000")}" do
pipeline/wiki_pipeline_spec.rb:              it "doesn't include a prohibited slug in a (.) relative link '#{link}'" do
pipeline/wiki_pipeline_spec.rb:                  "[Link](./#{link})",
pipeline/wiki_pipeline_spec.rb:              it "doesn't include a prohibited slug in a (..) relative link '#{link}'" do
pipeline/wiki_pipeline_spec.rb:                  "[Link](../#{link})",
pipeline/wiki_pipeline_spec.rb:      markdown = "![video_file](video_file_name.mp4)"
pipeline/wiki_pipeline_spec.rb:      expect(output).to include(%(<video src="/#{project.full_path}/-/wikis/nested/twice/video_file_name.mp4"))
pipeline/wiki_pipeline_spec.rb:      markdown = "![video file](video file name.mp4)"
pipeline/wiki_pipeline_spec.rb:      expect(output).to include(%(<video src="/#{project.full_path}/-/wikis/nested/twice/video%20file%20name.mp4"))
pipeline/wiki_pipeline_spec.rb:      markdown = "![audio_file](audio_file_name.wav)"
pipeline/wiki_pipeline_spec.rb:      expect(output).to include(%(<audio src="/#{project.full_path}/-/wikis/nested/twice/audio_file_name.wav"))
pipeline/wiki_pipeline_spec.rb:      markdown = "![audio file](audio file name.wav)"
pipeline/wiki_pipeline_spec.rb:      expect(output).to include(%(<audio src="/#{project.full_path}/-/wikis/nested/twice/audio%20file%20name.wav"))
pipeline/wiki_pipeline_spec.rb:        markdown = "[[#{wiki_file.path}]]"
pipeline/wiki_pipeline_spec.rb:        full_path = "/#{project.full_path}/-/wikis/nested/twice/#{wiki_file.path}"
pipeline/incident_management/timeline_event_pipeline_spec.rb:          %q(<p><a href="https://gitlab.com" rel="nofollow noreferrer noopener" target="_blank">GitLab</a></p>)
pipeline/incident_management/timeline_event_pipeline_spec.rb:          '<p><a class="with-attachment-icon" href="/path/to/image.png" target="_blank" rel="noopener noreferrer">Name</a></p>'
pipeline/incident_management/timeline_event_pipeline_spec.rb:          %(<p><gl-emoji title="thumbs up" data-name="#{AwardEmoji::THUMBS_UP}" data-unicode-version="6.0">👍</gl-emoji><gl-emoji title="thumbs up" data-name="#{AwardEmoji::THUMBS_UP}" data-unicode-version="6.0">👍</gl-emoji></p>)
pipeline/incident_management/timeline_event_pipeline_spec.rb:      let(:markdown) { %(~"#{label.name}" ~unknown) }
pipeline/incident_management/timeline_event_pipeline_spec.rb:          %r{<p>.+<a href="[\w\-/]+-/issues\?label_name=#{label.name}".+style="background-color: #\d{6}".*>#{label.name}</span></a></span> ~unknown</p>}
pipeline/incident_management/timeline_event_pipeline_spec.rb:      let(:markdown) { "issue ##{issue.iid}" }
pipeline/incident_management/timeline_event_pipeline_spec.rb:        is_expected.to match(%r{<p>issue <a href="[\w\-/]+-/issues/#{issue.iid}".*>##{issue.iid}</a></p>})
pipeline/incident_management/timeline_event_pipeline_spec.rb:      let(:markdown) { "MR !#{mr.iid}" }
pipeline/incident_management/timeline_event_pipeline_spec.rb:        is_expected.to match(%r{<p>MR <a href="[\w\-/]+-/merge_requests/#{mr.iid}".*>!#{mr.iid}</a></p>})
color_parser_spec.rb:        it "parses the valid hex color #{color}" do
color_parser_spec.rb:        it "does not parse the invalid hex color #{color}" do
color_parser_spec.rb:        it "parses the valid rgb color #{color}" do
color_parser_spec.rb:        it "does not parse the invalid rgb color #{color}" do
color_parser_spec.rb:        it "parses the valid hsl color #{color}" do
color_parser_spec.rb:        it "does not parse the invalid hsl color #{color}" do
reference_redactor_spec.rb:               .fragment('<a class="gfm" href="https://www.gitlab.com" data-reference-type="issue">foo</a>')
reference_redactor_spec.rb:               .fragment('<a class="gfm" href="https://www.gitlab.com" data-reference-type="issue">bar</a>')
reference_redactor_spec.rb:        doc = Nokogiri::HTML.fragment("<a class='gfm' href='https://www.gitlab.com' data-reference-type='issue'>foo</a>")
reference_redactor_spec.rb:          doc = Nokogiri::HTML.fragment("<a class='gfm' href='https://www.gitlab.com' data-reference-type='issue' data-original='#{original_content}'>bar</a>")
reference_redactor_spec.rb:          html = "<a href='https://www.gitlab.com' data-link-reference='true' class='gfm' data-reference-type='issue' data-reference-type='issue' data-original='Marge'>Marge</a>"
reference_redactor_spec.rb:          expect(doc.to_html).to eq('<a href="https://www.gitlab.com">Marge</a>')
reference_redactor_spec.rb:          html = "<a href='https://www.gitlab.com' data-link-reference='true' class='gfm' data-reference-type='issue' data-reference-type='issue' data-original='Homer'>Marge</a>"
reference_redactor_spec.rb:          expect(doc.to_html).to eq('<a href="https://www.gitlab.com">Homer</a>')
reference_redactor_spec.rb:        doc = Nokogiri::HTML.fragment("<a class='gfm' href='https://www.gitlab.com' data-reference-type='issue' data-issue='#{issue.id}'>foo</a>")
reference_redactor_spec.rb:        doc = Nokogiri::HTML.fragment("<a class='gfm' href='https://www.gitlab.com' data-reference-type='issue' data-external-issue='#{issue.id}' data-project='#{project.id}'>foo</a>")
reference_redactor_spec.rb:        doc1_html = '<a class="gfm" data-reference-type="issue">foo</a>'
reference_redactor_spec.rb:        doc2_html = '<a class="gfm" data-reference-type="issue">bar</a>'
reference_redactor_spec.rb:        doc = Nokogiri::HTML.fragment('<a class="gfm" href="https://gitlab.com/path/to/project/-/wikis/foo" data-reference-type="wiki_page" data-gollum="true">foo</a>')
reference_redactor_spec.rb:          "#{type}": issuable.id
reference_redactor_spec.rb:      doc = Nokogiri::HTML.fragment('<a href="foo">foo</a>')
reference_redactor_spec.rb:      doc = Nokogiri::HTML.fragment('<a data-reference-type="issue"></a>')
reference_redactor_spec.rb:      doc = Nokogiri::HTML.fragment('<a data-reference-type="some_invalid_type"></a>')
filter/spaced_link_filter_spec.rb:      doc = filter("See #{link}")
filter/spaced_link_filter_spec.rb:      link = '[example](page slug "title")'
filter/spaced_link_filter_spec.rb:      doc  = filter("See #{link}")
filter/spaced_link_filter_spec.rb:      doc  = filter("See #{link}")
filter/spaced_link_filter_spec.rb:      doc  = filter("See #{link}")
filter/spaced_link_filter_spec.rb:      doc = filter("See #{image}")
filter/spaced_link_filter_spec.rb:      image = '![example](img test.jpg "title")'
filter/spaced_link_filter_spec.rb:      doc   = filter("See #{image}")
filter/spaced_link_filter_spec.rb:    doc   = filter("See #{link1} and #{image} and #{link2}")
filter/spaced_link_filter_spec.rb:    it "ignores valid links contained inside '#{xpath}' element" do
filter/spaced_link_filter_spec.rb:      exp = act = "<#{match[:element]}#{" #{match[:attribute]}" if match[:attribute]}>See #{link}</#{match[:element]}>"
filter/escaped_char_filter_spec.rb:    markdown = Banzai::Filter::EscapedCharFilter::REFERENCE_CHARS.map { |char| "\\#{char}" }.join(' ')
filter/escaped_char_filter_spec.rb:      expect(html).to include("<span data-escaped-char>#{char}</span>")
filter/escaped_char_filter_spec.rb:    markdown = %q(\"\'\*\+\,\-\.\/\:\;\<\=\>\?\[\]\`\|) + %q[\(\)\\\\]
filter/escaped_char_filter_spec.rb:    expect(filter(doc).to_s).to eq '<p data-sourcepos="1:1-1:14">[link](&lt;foo&gt;)</p>'
filter/table_of_contents_tag_filter_spec.rb:        expect(doc.to_html).to include('<ul class="section-nav">')
filter/table_of_contents_tag_filter_spec.rb:        expect(doc.to_html).to include('<li><a href="#foo">Foo</a></li>')
filter/table_of_contents_tag_filter_spec.rb:        doc = pipeline_filter("This is a #{toc_tag} in a sentence\n\n# Foo")
filter/table_of_contents_tag_filter_spec.rb:        doc = pipeline_filter("Use `#{toc_tag}` for table of contents\n\n# Foo")
filter/table_of_contents_tag_filter_spec.rb:        expect(doc.to_html).to include("Use <code>#{toc_tag}</code> for table of contents")
filter/table_of_contents_tag_filter_spec.rb:        doc = pipeline_filter("prefix #{toc_tag}\n\n# Foo")
filter/table_of_contents_tag_filter_spec.rb:        doc = pipeline_filter("#{toc_tag} suffix\n\n# Foo")
filter/table_of_contents_tag_filter_spec.rb:        doc = pipeline_filter("_prefix_#{toc_tag}\n\n# Foo")
filter/table_of_contents_tag_filter_spec.rb:        let(:markdown) { "[[_TOC_]]\n\n# Foo" }
filter/table_of_contents_tag_filter_spec.rb:        let(:markdown) { "[[_toc_]]\n\n# Foo" }
filter/table_of_contents_tag_filter_spec.rb:        doc = pipeline_filter("this [[_toc_]]\n\n# Foo")
filter/table_of_contents_tag_filter_spec.rb:        expect(doc.to_html).to include('this <a href="_toc_" data-wikilink="true">_toc_</a>')
filter/table_of_contents_tag_filter_spec.rb:        let(:markdown) { "[TOC]\n\n# Foo" }
filter/table_of_contents_tag_filter_spec.rb:        let(:markdown) { "[toc]\n\n# Foo" }
filter/table_of_contents_tag_filter_spec.rb:      "#{'#' * level} #{text}\n"
filter/table_of_contents_tag_filter_spec.rb:    let(:results) { result("[toc]\n\n#{header(1, 'Header 1')}#{header(2, 'Header 2')}") }
filter/table_of_contents_tag_filter_spec.rb:      let(:content) { '&lt;img src="x" onerror="alert(42)"&gt;' }
filter/markdown_filter_spec.rb:      engine = "Banzai::Filter::MarkdownEngines::#{default_engine}".constantize
filter/markdown_filter_spec.rb:      result = filter("```html\nsome code\n```", no_sourcepos: true)
filter/markdown_filter_spec.rb:      expect(result).to start_with('<pre lang="html"><code>')
filter/markdown_filter_spec.rb:      result = filter("```\nsome code\n```", no_sourcepos: true)
filter/markdown_filter_spec.rb:      result = filter("```日\nsome code\n```", no_sourcepos: true)
filter/markdown_filter_spec.rb:      expect(result).to start_with('<pre lang="日"><code>')
filter/markdown_filter_spec.rb:      result = filter("```ruby:red gem foo\nsome code\n```", no_sourcepos: true)
filter/markdown_filter_spec.rb:      expect(result).to include('lang="ruby:red"')
filter/markdown_filter_spec.rb:      expect(result).to include('data-meta="gem foo"')
filter/markdown_filter_spec.rb:      expect(result).to eq '<p data-sourcepos="1:1-1:4">test</p>'
filter/markdown_filter_spec.rb:      expect(result).to include('<section class="footnotes" data-footnotes>')
filter/markdown_filter_spec.rb:        <ul data-sourcepos="1:1-6:10">
filter/markdown_filter_spec.rb:        <li data-sourcepos="1:1-5:5">
filter/markdown_filter_spec.rb:        <p data-sourcepos="1:3-1:10">item one</p>
filter/markdown_filter_spec.rb:        <blockquote data-sourcepos="3:3-5:5">
filter/markdown_filter_spec.rb:        <p data-sourcepos="4:3-4:13">Paragraph 1</p>
filter/markdown_filter_spec.rb:        <li data-sourcepos="6:1-6:10">
filter/markdown_filter_spec.rb:        <p data-sourcepos="6:3-6:10">item two</p>
filter/markdown_filter_spec.rb:    <blockquote data-sourcepos="3:1-5:3">
filter/markdown_filter_spec.rb:    <p data-sourcepos="4:1-4:9">something</p>
filter/markdown_filter_spec.rb:        <p><code data-math-style="inline">2+2</code> + <span data-math-style="inline">3+3</span> + <span data-math-style="display">4+4</span></p>
filter/markdown_filter_spec.rb:        <p><span data-math-style="display">
filter/markdown_filter_spec.rb:        <pre lang="math" data-math-style="display"><code>6+6
filter/markdown_filter_spec.rb:      expected = "<p>http://example.com</p>"
filter/markdown_filter_spec.rb:      expected = '<p><a href="https://example.com">https://example.com</a></p>'
filter/markdown_filter_spec.rb:      expected = '<p><a href="smb:///Volumes/shared/foo.pdf">smb:///Volumes/shared/foo.pdf</a></p>'
filter/sanitization_filter_spec.rb:      act = %q(<pre class="code highlight white c"><code>&lt;span class="k"&gt;def&lt;/span&gt;</code></pre>)
filter/sanitization_filter_spec.rb:      exp = %q(<pre><code>&lt;span class="k"&gt;def&lt;/span&gt;</code></pre>)
filter/sanitization_filter_spec.rb:      act = %q(<span class="k">def</span>)
filter/sanitization_filter_spec.rb:        <table data-table-fields="foo" data-table-filter="true" data-table-markdown="true">
filter/sanitization_filter_spec.rb:          <tr><th style="text-align: center">Head</th></tr>
filter/sanitization_filter_spec.rb:          <tr><td style="text-align: right">Body</th></tr>
filter/sanitization_filter_spec.rb:          <tr><th style="text-align: foo">Head</th></tr>
filter/sanitization_filter_spec.rb:          <tr><td style="position: fixed; height: 50px; width: 50px; background: red; z-index: 999; font-size: 36px; text-align: center">Body</th></tr>
filter/sanitization_filter_spec.rb:        <div style="text-align: center">Text</div>
filter/sanitization_filter_spec.rb:      exp = act = %q(<abbr title="HyperText Markup Language">HTML</abbr>)
filter/sanitization_filter_spec.rb:        <img name="getElementById" src="">
filter/sanitization_filter_spec.rb:        <span name="foo" class="bar">Hi</span>
filter/sanitization_filter_spec.rb:        <a name="foo" class="bar">Bye</a>
filter/sanitization_filter_spec.rb:      exp = act = '<a rel="license" href="http://example.com">rel-license</a>'
filter/sanitization_filter_spec.rb:      <span class="code" data-math-style="inline">something</span>
filter/sanitization_filter_spec.rb:      <pre class="code" data-math-style="inline">something</pre>
filter/sanitization_filter_spec.rb:      <code class="code" data-math-style="inline">something</code>
filter/sanitization_filter_spec.rb:      <div class="code" data-math-style="inline">something</div>
filter/sanitization_filter_spec.rb:      <span data-math-style="inline">something</span>
filter/sanitization_filter_spec.rb:      <pre data-math-style="inline">something</pre>
filter/sanitization_filter_spec.rb:      <code data-math-style="inline">something</code>
filter/sanitization_filter_spec.rb:      exp = %q(<p data-sourcepos="1:1-1:10">foo/bar.md</p>)
filter/sanitization_filter_spec.rb:          <a href="#fn-first" id="fnref-first" data-footnote-ref data-footnote-backref data-footnote-backref-idx>foo/bar.md</a>
filter/sanitization_filter_spec.rb:        exp = %q(<a href="#fn-first" id="fnref-first">foo/bar.md</a>)
filter/sanitization_filter_spec.rb:        exp = %q(<ol><li id="fn-last">footnote</li></ol>)
filter/sanitization_filter_spec.rb:        exp = %q(<a href="#fn1">link</a>)
filter/sanitization_filter_spec.rb:          act = filter(%(<a href="#fn1" id="#{id}">link</a>))
filter/sanitization_filter_spec.rb:          act = filter(%(<ol><li id="#{id}">footnote</li></ol>))
filter/sanitization_filter_spec.rb:        exp = %q(<a href="#this-is-a-header" class="anchor" id="user-content-this-is-a-header"></a>)
filter/sanitization_filter_spec.rb:        exp = %q(<a href="#this-is-a-header"></a>)
filter/sanitization_filter_spec.rb:        act = filter(%q(<a href="#this-is-a-header" id="user-content-this-is-a-header"></a>))
filter/sanitization_filter_spec.rb:        exp = %q(<a href="#this-is-a-header" class="anchor"></a>)
filter/sanitization_filter_spec.rb:        act = filter(%q(<a href="#this-is-a-header" class="anchor" id="this-is-a-header"></a>))
filter/sanitization_filter_spec.rb:        %q(<a href="#this-is-a-header" class="anchor"></a>) | %q(<a href="#this-is-a-header" class="anchor"></a>)
filter/sanitization_filter_spec.rb:        %q(<a href="#this-is-a-header" class="some-other-class anchor"></a>) | %q(<a href="#this-is-a-header"></a>)
filter/sanitization_filter_spec.rb:        %q(<div class="markdown-alert markdown-alert-note"></div>) | %q(<div class="markdown-alert markdown-alert-note"></div>)
filter/sanitization_filter_spec.rb:        %q(<div class="markdown-alert markdown-alert-tip"></div>) | %q(<div class="markdown-alert markdown-alert-tip"></div>)
filter/sanitization_filter_spec.rb:        %q(<div class="markdown-alert markdown-alert-important"></div>) | %q(<div class="markdown-alert markdown-alert-important"></div>)
filter/sanitization_filter_spec.rb:        %q(<div class="markdown-alert markdown-alert-warning"></div>) | %q(<div class="markdown-alert markdown-alert-warning"></div>)
filter/sanitization_filter_spec.rb:        %q(<div class="markdown-alert markdown-alert-caution"></div>) | %q(<div class="markdown-alert markdown-alert-caution"></div>)
filter/sanitization_filter_spec.rb:        %q(<div class="other_class markdown-alert markdown-alert-caution"></div>) | %q(<div></div>)
filter/sanitization_filter_spec.rb:        %q(<p class="markdown-alert-title"></p>) | %q(<p class="markdown-alert-title"></p>)
filter/sanitization_filter_spec.rb:        %q(<p class="markdown-alert-title other_class"></p>) | %q(<p></p>)
filter/sanitization_filter_spec.rb:        %q(<span class="idiff left right deletion addition"></span>) | %q(<span class="idiff left right deletion addition"></span>)
filter/sanitization_filter_spec.rb:        %q(<span class="idiff left addition"></span>) | %q(<span class="idiff left addition"></span>)
filter/sanitization_filter_spec.rb:        %q(<span class="idiff left addition other_class"></span>) | %q(<span></span>)
filter/sanitization_filter_spec.rb:        %q(<span class="left addition"></span>) | %q(<span></span>)
filter/sanitization_filter_spec.rb:        %q(<code class="idiff"></code>) | %q(<code class="idiff"></code>)
filter/sanitization_filter_spec.rb:        %q(<code class="other_class"></code>) | %q(<code></code>)
filter/color_filter_spec.rb:    it "inserts color chip for supported color format #{color}" do
filter/color_filter_spec.rb:      expect(color_chip[:style]).to eq "background-color: #{color};"
filter/color_filter_spec.rb:    "<code>#{string}</code>"
filter/video_link_filter_spec.rb:    attrs = %(src="#{path}")
filter/video_link_filter_spec.rb:    attrs += %( width="#{width}") if width
filter/video_link_filter_spec.rb:    attrs += %( height="#{height}") if height
filter/video_link_filter_spec.rb:        let(:src) { "/path/video.#{ext}" }
filter/video_link_filter_spec.rb:        let(:src) { "/path/video.#{ext.upcase}" }
filter/video_link_filter_spec.rb:    let(:image) { %(<img src="#{src}" data-canonical-src=""/>) }
filter/video_link_filter_spec.rb:      image = %(<img src="#{proxy_src}" data-canonical-src="#{canonical_src}"/>)
filter/kroki_filter_spec.rb:    stub_application_setting(kroki_enabled: true, kroki_url: "http://localhost:8000")
filter/kroki_filter_spec.rb:      <pre data-canonical-lang="nomnoml"><code>[Pirate|eyeCount: Int|raid();pillage()|
filter/kroki_filter_spec.rb:    expect(doc.to_s).to eq '<img src="http://localhost:8000/nomnoml/svg/eNqLDsgsSixJrUmtTHXOL80rsVLwzCupKUrMTNHQtC7IzMlJTE_V0KzhUlCITkpNLEqJ1dWNLkgsKsoviUUSs7KLTssvzVHIzS8tyYjligUAMhEd0g==" class="js-render-kroki" data-diagram="nomnoml" data-diagram-src="data:text/plain;base64,W1BpcmF0ZXxleWVDb3VudDogSW50fHJhaWQoKTtwaWxsYWdlKCl8CiAgW2JlYXJkXS0tW3BhcnJvdF0KICBbYmVhcmRdLTo+W2ZvdWwgbW91dGhdCl0=">'
filter/kroki_filter_spec.rb:      kroki_url: "http://localhost:8000",
filter/kroki_filter_spec.rb:      plantuml_url: "http://localhost:8080"
filter/kroki_filter_spec.rb:      <pre data-canonical-lang="nomnoml"><code>[Pirate|eyeCount: Int|raid();pillage()|
filter/kroki_filter_spec.rb:    expect(doc.to_s).to eq '<img src="http://localhost:8000/nomnoml/svg/eNqLDsgsSixJrUmtTHXOL80rsVLwzCupKUrMTNHQtC7IzMlJTE_V0KzhUlCITkpNLEqJ1dWNLkgsKsoviUUSs7KLTssvzVHIzS8tyYjligUAMhEd0g==" class="js-render-kroki" data-diagram="nomnoml" data-diagram-src="data:text/plain;base64,W1BpcmF0ZXxleWVDb3VudDogSW50fHJhaWQoKTtwaWxsYWdlKCl8CiAgW2JlYXJkXS0tW3BhcnJvdF0KICBbYmVhcmRdLTo+W2ZvdWwgbW91dGhdCl0=">'
filter/kroki_filter_spec.rb:      <pre data-canonical-lang="nomnoml"><code>[Pirate|eyeCount: Int|raid();pillage()|
filter/kroki_filter_spec.rb:      kroki_url: "http://localhost:8000",
filter/kroki_filter_spec.rb:      plantuml_url: "http://localhost:8080"
filter/kroki_filter_spec.rb:    input = %(<pre data-canonical-lang="plantuml"><code>Bob-&gt;Alice : hello\n</code></pre>)
filter/kroki_filter_spec.rb:    stub_application_setting(kroki_enabled: true, kroki_url: "http://localhost:8000")
filter/kroki_filter_spec.rb:    text = "[Pirate|eyeCount: Int|raid();pillage()|\n  [beard]--[parrot]\n  [beard]-:&gt;[foul mouth]\n]\n" * 25
filter/kroki_filter_spec.rb:    doc = filter(%(<pre data-canonical-lang="nomnoml"><code>#{text}</code></pre>))
filter/kroki_filter_spec.rb:    expect(doc.to_s).to start_with '<img src="http://localhost:8000/nomnoml/svg/eNrtzCEOgDAMAEC_V0wysQ9AgkHh8M1EyQosGYw0nSDZ47EInlB74mBJjEKNHppKvaS38yWNMcXODXfKGXfqXDPWwkrIMXgPNzIXCR_rR9hKzfYsVY5gggFttdVWW2211Vbb__YFciTqeA==" hidden="" class="js-render-kroki" data-diagram="nomnoml" data-diagram-src="data:text/plain;base64,W1BpcmF0ZXxleWVDb3VudDog'
filter/kroki_filter_spec.rb:    stub_application_setting(kroki_enabled: true, kroki_url: "http://localhost:8000")
filter/kroki_filter_spec.rb:      <pre><code data-canonical-lang="nomnoml">[Pirate|eyeCount: Int|raid();pillage()|
filter/kroki_filter_spec.rb:    expect(doc.to_s).to eq '<img src="http://localhost:8000/nomnoml/svg/eNqLDsgsSixJrUmtTHXOL80rsVLwzCupKUrMTNHQtC7IzMlJTE_V0KzhUlCITkpNLEqJ1dWNLkgsKsoviUUSs7KLTssvzVHIzS8tyYjligUAMhEd0g==" class="js-render-kroki" data-diagram="nomnoml" data-diagram-src="data:text/plain;base64,W1BpcmF0ZXxleWVDb3VudDogSW50fHJhaWQoKTtwaWxsYWdlKCl8CiAgW2JlYXJkXS0tW3BhcnJvdF0KICBbYmVhcmRdLTo+W2ZvdWwgbW91dGhdCl0=">'
filter/kroki_filter_spec.rb:    stub_application_setting(kroki_enabled: true, kroki_url: "http://localhost:8000")
filter/kroki_filter_spec.rb:    doc = filter(%(<a><pre data-canonical-lang='f/" onerror=alert(1) onload=alert(1) '><code data-canonical-lang="wavedrom">xss</code></pre></a>))
filter/kroki_filter_spec.rb:    expect(doc.to_s).to eq %(<a><pre data-canonical-lang='f/" onerror=alert(1) onload=alert(1) '><code data-canonical-lang="wavedrom">xss</code></pre></a>)
filter/kroki_filter_spec.rb:  it "strips at most one trailing newline from the diagram's source" do
filter/kroki_filter_spec.rb:    stub_application_setting(kroki_enabled: true, kroki_url: "http://localhost:8000")
filter/kroki_filter_spec.rb:    input = %(<pre data-canonical-lang="graphviz"><code>digraph { a -> b }\n// Next line left intentionally blank.\n\n</code></pre>)
filter/kroki_filter_spec.rb:    output = '<img src="http://localhost:8000/graphviz/svg/eNpLyUwvSizIUKhWSFTQtVNIUqjl0tdX8EutKFHIycxLVchJTStRyMwrSc0ryczPS8zJqVRIyknMy9bjAgArOBNq" class="js-render-kroki" data-diagram="graphviz" data-diagram-src="data:text/plain;base64,ZGlncmFwaCB7IGEgLT4gYiB9Ci8vIE5leHQgbGluZSBsZWZ0IGludGVudGlvbmFsbHkgYmxhbmsuCg==">'
filter/autolink_filter_spec.rb:  let(:quotes) { ['"', "'"] }
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", { pipeline: :single_line })
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", { pipeline: :commit_description })
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link1} and #{link2}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context.merge(link_attr: { class: 'custom' }))
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link1} and #{link2}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      expect(doc.to_s).to eq("See #{link}")
filter/autolink_filter_spec.rb:      doc = filter("See #{link}", context)
filter/autolink_filter_spec.rb:      expect(doc.to_s).to eq("See #{link}")
filter/autolink_filter_spec.rb:        doc = filter("See #{link}#{trailing_punctuation}", context)
filter/autolink_filter_spec.rb:        balanced_link = "#{link}#{open}abc#{close}"
filter/autolink_filter_spec.rb:        balanced_actual = filter("See #{balanced_link}...", context)
filter/autolink_filter_spec.rb:        unbalanced_link = "#{link}#{close}"
filter/autolink_filter_spec.rb:        unbalanced_actual = filter("See #{unbalanced_link}...", context)
filter/autolink_filter_spec.rb:        expect(unescape(balanced_actual.to_html)).to eq(Rinku.auto_link("See #{balanced_link}..."))
filter/autolink_filter_spec.rb:        expect(unescape(unbalanced_actual.to_html)).to eq(Rinku.auto_link("See #{unbalanced_link}..."))
filter/autolink_filter_spec.rb:        balanced_link = "#{link}#{quote}abc#{quote}"
filter/autolink_filter_spec.rb:        balanced_actual = filter("See #{balanced_link}...", context)
filter/autolink_filter_spec.rb:        unbalanced_link = "#{link}#{quote}"
filter/autolink_filter_spec.rb:        unbalanced_actual = filter("See #{unbalanced_link}...", context)
filter/autolink_filter_spec.rb:        expect(unescape(balanced_actual.to_html)).to eq(Rinku.auto_link("See #{balanced_link}..."))
filter/autolink_filter_spec.rb:        expect(unescape(unbalanced_actual.to_html)).to eq(Rinku.auto_link("See #{unbalanced_link}..."))
filter/autolink_filter_spec.rb:      complicated_link = "(#{link}(a'b[c'd]))'"
filter/autolink_filter_spec.rb:      expected_complicated_link = %{(<a href="#{link}(a'b[c'd]))">#{link}(a'b[c'd]))</a>'}
filter/autolink_filter_spec.rb:      encoded_link = "#{link}?foo=bar&amp;baz=quux"
filter/autolink_filter_spec.rb:      expected_encoded_link = %(<a href="#{encoded_link}">#{encoded_link}</a>)
filter/autolink_filter_spec.rb:      doc = filter("See &lt;&lt;&lt;#{link}&gt;&gt;&gt;", context)
filter/autolink_filter_spec.rb:      expect(doc.text).to eq "See <<<#{link}>>>"
filter/autolink_filter_spec.rb:      # rendered text looks like "http://example.com/evilexe.mp3"
filter/autolink_filter_spec.rb:      evil_link = "#{link}evil\u202E3pm.exe"
filter/autolink_filter_spec.rb:      expect(doc.at_css('a')['href']).to eq "http://about.gitlab.com/evil%E2%80%AE3pm.exe"
filter/autolink_filter_spec.rb:      link     = "http://one😄two.com"
filter/autolink_filter_spec.rb:      expected = "http://one%F0%9F%98%84two.com"
filter/autolink_filter_spec.rb:      it "ignores valid links contained inside '#{elem}' element" do
filter/autolink_filter_spec.rb:        exp = act = "<#{elem}>See #{link}</#{elem}>"
filter/autolink_filter_spec.rb:      it "renders text after the link correctly for #{protocol}" do
filter/autolink_filter_spec.rb:        doc = filter(ERB::Util.html_escape_once("<#{protocol}://link><another>"), context)
filter/autolink_filter_spec.rb:    doc = "http://#{'&' * 1_000_000}x"
filter/autolink_filter_spec.rb:    doc = "#{'h' * 1_000_000}://example.com"
filter/autolink_filter_spec.rb:    doc = "#{'h' * 1_000_000}://"
filter/attributes_filter_spec.rb:    %(<img src="example.jpg">)
filter/attributes_filter_spec.rb:        "#{image}{width=100}"           | '<img src="example.jpg" width="100">'
filter/attributes_filter_spec.rb:        "#{image}{  width=100 }"        | '<img src="example.jpg" width="100">'
filter/attributes_filter_spec.rb:        "#{image}{width=\"100\"}"       | '<img src="example.jpg" width="100">'
filter/attributes_filter_spec.rb:        "#{image}{width=100 width=200}" | '<img src="example.jpg" width="200">'
filter/attributes_filter_spec.rb:        "#{image}{.test_class width=100 style=\"width:400\"}"   | '<img src="example.jpg" width="100">'
filter/attributes_filter_spec.rb:        "<img src=\"example.jpg\" class=\"lazy\" />{width=100}" | '<img src="example.jpg" class="lazy" width="100">'
filter/attributes_filter_spec.rb:        "#{image} {width=100}"             | '<img src="example.jpg"> {width=100}'
filter/attributes_filter_spec.rb:        "#{image}{width=100\nheight=100}"  | "<img src=\"example.jpg\">{width=100\nheight=100}"
filter/attributes_filter_spec.rb:        "{width=100 height=100}\n#{image}" | "{width=100 height=100}\n<img src=\"example.jpg\">"
filter/attributes_filter_spec.rb:        "#{image}{width=100 height=200px}" | '<img src="example.jpg" width="100" height="200px">'
filter/attributes_filter_spec.rb:        "#{image}{width=100}"              | '<img src="example.jpg" width="100">'
filter/attributes_filter_spec.rb:        "#{image}{width=100px}"            | '<img src="example.jpg" width="100px">'
filter/attributes_filter_spec.rb:        "#{image}{height=100%}"            | '<img src="example.jpg" height="100%">'
filter/attributes_filter_spec.rb:        "#{image}{width=\"100%\"}"         | '<img src="example.jpg" width="100%">'
filter/attributes_filter_spec.rb:        "#{image}{width=100cs}"           | '<img src="example.jpg">'
filter/attributes_filter_spec.rb:        "#{image}{width=auto height=200}" | '<img src="example.jpg" height="200">'
filter/attributes_filter_spec.rb:        "#{image}{width=10000}"           | '<img src="example.jpg">'
filter/attributes_filter_spec.rb:        "#{image}{width=-200}"            | '<img src="example.jpg">'
filter/html_entity_filter_spec.rb:  let(:unescaped) { 'foo <strike attr="foo">&&amp;&</strike>' }
filter/absolute_link_filter_spec.rb:          expect(doc.at_css('a')['href']).to eq "#{fake_url}/foo"
filter/absolute_link_filter_spec.rb:          doc = filter(link("#{fake_url}/foo", 'gfm'), only_path_context)
filter/absolute_link_filter_spec.rb:          expect(doc.at_css('a')['href']).to eq "#{fake_url}/foo"
filter/absolute_link_filter_spec.rb:            allow(Gitlab.config.gitlab).to receive(:url).and_return("#{fake_url}/gitlab/")
filter/absolute_link_filter_spec.rb:            doc = filter(link("/gitlab/foo", 'gfm'), only_path_context)
filter/absolute_link_filter_spec.rb:            expect(doc.at_css('a')['href']).to eq "#{fake_url}/gitlab/foo"
filter/absolute_link_filter_spec.rb:    %(<a class="#{css_class}" href="#{path}">example</a>)
filter/table_of_contents_tag_legacy_filter_spec.rb:        doc = filter(html, context, { toc: "FOO" })
filter/table_of_contents_tag_legacy_filter_spec.rb:        expect(doc.to_html).to eq("FOO")
filter/table_of_contents_tag_legacy_filter_spec.rb:      "#{'#' * level} #{text}\n"
filter/table_of_contents_tag_legacy_filter_spec.rb:    let(:results) { result("[toc]\n\n#{header(1, 'Header 1')}#{header(2, 'Header 2')}") }
filter/table_of_contents_tag_legacy_filter_spec.rb:      let(:content) { '&lt;img src="x" onerror="alert(42)"&gt;' }
filter/emoji_filter_spec.rb:    doc = filter("'👍'")
filter/emoji_filter_spec.rb:    doc = filter("'🙈🙉🙊'")
filter/emoji_filter_spec.rb:    doc = filter("'🙈:see_no_evil:🙉:hear_no_evil:🙊:speak_no_evil:'")
filter/emoji_filter_spec.rb:      <p>↩ Test<sup data-sourcepos="1:9-1:12" class="footnote-ref"><a href="#fn-1" id="fnref-1" data-footnote-ref>1</a></sup></p>
filter/emoji_filter_spec.rb:      <section class="footnotes" data-footnotes>
filter/emoji_filter_spec.rb:      <li id="fn-1">
filter/emoji_filter_spec.rb:      <p>footnote <a href="#fnref-1" class="footnote-backref" data-footnote-backref data-footnote-backref-idx="1" aria-label="Back to reference 1">↩</a></p>
filter/emoji_filter_spec.rb:    let(:exclude_components) { "🏻🏼🏽🏾🏿🦰🦱🦳🦲" }
filter/issuable_reference_expansion_filter_spec.rb:    html = %(See <a href="https://google.com/">Google</a>)
filter/issuable_reference_expansion_filter_spec.rb:    link = create_link("#{closed_issue.to_reference} (comment 1)", issue: closed_issue.id, reference_type: 'issue')
filter/issuable_reference_expansion_filter_spec.rb:    expect(doc.css('a').last.text).to eq("#{closed_issue.to_reference} (comment 1)")
filter/issuable_reference_expansion_filter_spec.rb:      "#{merge_request.to_reference} (diffs)",
filter/issuable_reference_expansion_filter_spec.rb:    expect(doc.css('a').last.text).to eq("#{merge_request.to_reference} (diffs)")
filter/issuable_reference_expansion_filter_spec.rb:    expect(doc.css('a').last.text).to eq("#{closed_issue.to_reference(other_project)} (closed)")
filter/issuable_reference_expansion_filter_spec.rb:    expect(doc.css('a').last.text).to eq("#{closed_issue.to_reference(other_project)} (closed)")
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type)
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(moved_issuable.to_reference, "#{issuable_type}": moved_issuable.id,
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{moved_issuable.to_reference} (moved)")
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type)
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{issuable.to_reference} (closed)")
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type,
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{issuable.title} (#{issuable.to_reference})")
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type,
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{issuable.title.truncate(50)} (#{issuable.to_reference})")
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type,
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{issuable.title} (#{issuable.to_reference} - closed)")
filter/issuable_reference_expansion_filter_spec.rb:          "#{issuable_type}": issuable.id,
filter/issuable_reference_expansion_filter_spec.rb:        expect(doc.css('a').last.text.scan(/\p{Emoji_Presentation}/)).to eq(["🦅"])
filter/issuable_reference_expansion_filter_spec.rb:        expect(doc.css('a').last.text.scan(/\p{Emoji_Presentation}/)).to eq(["🦅"])
filter/issuable_reference_expansion_filter_spec.rb:        expect(doc.css('a').last.text.scan(/\p{Emoji_Presentation}/)).to eq(["🦅", "🐶"])
filter/issuable_reference_expansion_filter_spec.rb:      link = create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type,
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{issuable.title} (#{issuable.to_reference}) • Unassigned")
filter/issuable_reference_expansion_filter_spec.rb:        create_link(issuable.to_reference, "#{issuable_type}": issuable.id, reference_type: issuable_type,
filter/issuable_reference_expansion_filter_spec.rb:          "#{issuable.title} (#{issuable.to_reference}) • #{assignees[0].name}, #{assignees[1].name}+ " \
filter/issuable_reference_expansion_filter_spec.rb:          "• #{milestone.title}"
filter/issuable_reference_expansion_filter_spec.rb:          link2 = create_link(issuable2.to_reference, "#{issuable_type}": issuable2.id,
filter/issuable_reference_expansion_filter_spec.rb:            filter("#{link} #{link2}", context)
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{merge_request.to_reference} (closed)")
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{merge_request.to_reference} (merged)")
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{merge_request.title} (#{merge_request.to_reference})")
filter/issuable_reference_expansion_filter_spec.rb:      expect(doc.css('a').last.text).to eq("#{merge_request.title} (#{merge_request.to_reference}) • Unassigned")
filter/issuable_reference_expansion_filter_spec.rb:          "#{merge_request.title} (#{merge_request.to_reference}) • #{assignees[0].name}, #{assignees[1].name} • " \
filter/issuable_reference_expansion_filter_spec.rb:          "#{milestone.title}"
filter/issuable_reference_expansion_filter_spec.rb:            filter("#{link} #{link2}", context)
filter/external_link_filter_spec.rb:    it 'adds rel="nofollow" to external links' do
filter/external_link_filter_spec.rb:    it 'adds rel="noreferrer" to external links' do
filter/external_link_filter_spec.rb:    it 'adds rel="noopener" to external links' do
filter/external_link_filter_spec.rb:    exp = act = %q(<a id="ignored">Ignore Me</a>)
filter/external_link_filter_spec.rb:    exp = act = %q(<a href="irc://irc.freenode.net/gitlab">IRC</a>)
filter/external_link_filter_spec.rb:    exp = act = %(<a href="#{internal}/sign_in">Login</a>)
filter/external_link_filter_spec.rb:    let(:doc) { filter %q(<a href="https://google.com/">Google</a>) }
filter/external_link_filter_spec.rb:    let(:doc) { filter %q(<p><a href="https://google.com/">Google</a></p>) }
filter/external_link_filter_spec.rb:      doc = filter %q(<p><a href="don't crash on broken urls">Google</a></p>)
filter/external_link_filter_spec.rb:      expected = %q(<p><a href="don't%20crash%20on%20broken%20urls" rel="nofollow noreferrer noopener" target="_blank">Google</a></p>)
filter/external_link_filter_spec.rb:      doc = filter %q(<p><a href="mailto://jblogs@example.com">Email</a></p>)
filter/external_link_filter_spec.rb:      expected = %q(<p><a href="mailto://jblogs@example.com" rel="nofollow noreferrer noopener" target="_blank">Email</a></p>)
filter/external_link_filter_spec.rb:      doc = filter %q(<p><a href="mailto://jblogs@example.com">mailto://jblogs@example.com</a></p>)
filter/external_link_filter_spec.rb:      expected = %q(<p><a href="mailto://jblogs@example.com" rel="nofollow noreferrer noopener" target="_blank">mailto://jblogs@example.com</a></p>)
filter/external_link_filter_spec.rb:      doc = filter %q(<p><a target="_blank" href="http:evil.com">Reverse Tabnabbing</a></p>)
filter/external_link_filter_spec.rb:      expected = %q(<p><a target="_blank" href="http:evil.com" rel="nofollow noreferrer noopener">Reverse Tabnabbing</a></p>)
filter/external_link_filter_spec.rb:      let(:doc) { filter %q(<a href="https://user@google.com/">Google</a>) }
filter/external_link_filter_spec.rb:      let(:doc) { filter %(<a href="https://#{internal}@example.com" target="_blank">Reverse Tabnabbing</a>) }
filter/external_link_filter_spec.rb:      let(:doc) { filter %q(<p><a href="httP://google.com/">Google</a></p>) }
filter/external_link_filter_spec.rb:      let(:doc) { filter %q(<p><a href="hTTpS://google.com/">Google</a></p>) }
filter/external_link_filter_spec.rb:      internal_link = Gitlab.config.gitlab.url + "/sign_in"
filter/external_link_filter_spec.rb:      act = %(<a href="#{url}">Login</a>)
filter/external_link_filter_spec.rb:      exp = %(<a href="#{internal_link}">Login</a>)
filter/external_link_filter_spec.rb:      exp = act = %q(<a href="http_spec/foo.rb">Relative URL</a>)
filter/external_link_filter_spec.rb:    let(:doc) { filter %q(<p><a href="//google.com/">Google</a></p>) }
filter/external_link_filter_spec.rb:    # In rendered text this looks like "http://example.com/evilexe.mp3"
filter/external_link_filter_spec.rb:    let(:doc) { filter %(<a href="http://example.com/evil%E2%80%AE3pm.exe">http://example.com/evil\u202E3pm.exe</a>) }
filter/external_link_filter_spec.rb:      doc = filter %(<a href="http://example.com">One<span>and</span>\u202Eexe.mp3</a>)
filter/external_link_filter_spec.rb:      let(:doc)       { filter(%q(<a href="http://exa%F0%9F%98%84mple.com">http://exa😄mple.com</a>)) }
filter/external_link_filter_spec.rb:      let(:doc_email) { filter(%q(<a href="http://exa%F0%9F%98%84mple.com">http://exa😄mple.com</a>), emailable_links: true) }
filter/external_link_filter_spec.rb:      let(:html) { %q(<a href="https://assets.example.com/6d8b/634c" data-canonical-src="http://exa%F0%9F%98%84mple.com/test.png"><img src="http://exa%F0%9F%98%84mple.com/test.png" data-canonical-src="http://exa%F0%9F%98%84mple.com/test.png"></a>) }
filter/external_link_filter_spec.rb:        expect(doc.to_html).to include('class="has-tooltip"')
filter/external_link_filter_spec.rb:        expect(doc.to_html).to include('title="http://xn--example-6p25f.com/test.png"')
filter/external_link_filter_spec.rb:      let(:doc) { filter %q(<a href="http://exa%F0%9F%98%84mple.com">http://exa😄mple.com</a>) }
filter/external_link_filter_spec.rb:        expect(doc.to_html).to include('class="has-tooltip"')
filter/external_link_filter_spec.rb:        expect(doc.to_html).to include('title="http://xn--example-6p25f.com/"')
filter/external_link_filter_spec.rb:      let(:doc) { filter %q(<a href="http://example.com/evil%E2%80%AE3pm.exe">Evil Test</a>) }
filter/external_link_filter_spec.rb:        expect(doc.to_html).to include('class="has-tooltip"')
filter/external_link_filter_spec.rb:        expect(doc.to_html).to include('title="http://example.com/evil%E2%80%AE3pm.exe"')
filter/external_link_filter_spec.rb:    let(:doc) { filter %q(<a rel="license" href="http://example.com">rel-license</a>) }
filter/reference_redactor_filter_spec.rb:    html = %(See <a href="https://google.com/">Google</a>)
filter/reference_redactor_filter_spec.rb:      context "when a confidential issue is moved from a public project to a private one" do
filter/reference_redactor_filter_spec.rb:  context "for user references" do
filter/mermaid_filter_spec.rb:    doc = filter("<pre class='code highlight js-syntax-highlight mermaid' data-canonical-lang='mermaid' v-pre='true'><code>graph TD;\n  A--&gt;B;\n</code></pre>")
filter/code_language_filter_spec.rb:      result = filter(%(<pre lang="#{lang}"><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></pre>))
filter/code_language_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<pre><code>def fun end</code></pre>')
filter/code_language_filter_spec.rb:      result = filter('<pre lang="ruby"><code>def fun end</code></pre>')
filter/code_language_filter_spec.rb:      expect(result.to_html.delete("\n"))
filter/code_language_filter_spec.rb:        .to eq('<pre data-canonical-lang="ruby"><code>def fun end</code></pre>')
filter/code_language_filter_spec.rb:      result = filter('<pre><code lang="ruby">def fun end</code></pre>')
filter/code_language_filter_spec.rb:      expect(result.to_html.delete("\n"))
filter/code_language_filter_spec.rb:        .to eq('<pre data-canonical-lang="ruby"><code>def fun end</code></pre>')
filter/code_language_filter_spec.rb:    let_it_be(:xss_lang) { %(ruby data-meta="foo-bar-kux"&lt;script&gt;alert(1)&lt;/script&gt;) }
filter/code_language_filter_spec.rb:        <pre data-canonical-lang="ruby" data-lang-params="#{lang_params}">
filter/code_language_filter_spec.rb:        result = filter(%(<pre lang="ruby" data-meta="#{lang_params}"><code>This is a test</code></pre>))
filter/code_language_filter_spec.rb:        expect(result.to_html.delete("\n")).to eq(expected_result.delete("\n"))
filter/code_language_filter_spec.rb:        result = filter(%(<pre><code lang="ruby" data-meta="#{lang_params}">This is a test</code></pre>))
filter/code_language_filter_spec.rb:        expect(result.to_html.delete("\n")).to eq(expected_result.delete("\n"))
filter/code_language_filter_spec.rb:      %(ruby data-meta="foo-bar-kux"&lt;script&gt;alert(1)&lt;/script&gt;)
filter/code_language_filter_spec.rb:      %(ruby data-meta="foo-bar-kux"<script>alert(1)</script>)
filter/code_language_filter_spec.rb:      <pre data-canonical-lang="#{lang}" data-lang-params="#{lang_params} more-things">
filter/code_language_filter_spec.rb:        result = filter(%(<pre lang="#{lang}:#{lang_params} more-things"><code>This is a test</code></pre>))
filter/code_language_filter_spec.rb:        expect(result.to_html.delete("\n")).to eq(expected_result.delete("\n"))
filter/references/alert_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/alert_reference_filter_spec.rb:      act = "<#{elem}>Alert #{reference}</#{elem}>"
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("Alert (#{reference}.)")
filter/references/alert_reference_filter_spec.rb:      act = "Alert #{invalidate_reference(reference)}"
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("Alert #{reference}")
filter/references/alert_reference_filter_spec.rb:      allow(alert).to receive(:title).and_return(%("></a>whatever<a title="))
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("Alert #{reference}")
filter/references/alert_reference_filter_spec.rb:      expect(doc.text).to eq "Alert #{reference}"
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("Alert #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("Alert #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("Alert #{reference}", only_path: true)
filter/references/alert_reference_filter_spec.rb:    let_it_be(:reference) { "#{project2.full_path}^alert##{alert.iid}" }
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/alert_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{reference}.)")
filter/references/alert_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/alert_reference_filter_spec.rb:    let_it_be(:reference) { "#{project2.full_path}^alert##{alert.iid}" }
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}^alert##{alert.iid}.)")
filter/references/alert_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}^alert##{alert.iid}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}^alert##{alert.iid}.)")
filter/references/alert_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.path}^alert##{alert.iid}.)")
filter/references/alert_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/alert_reference_filter_spec.rb:    let_it_be(:reference) { "#{project2.path}^alert##{alert.iid}" }
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}^alert##{alert.iid}.)")
filter/references/alert_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}^alert##{alert.iid}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}^alert##{alert.iid}.)")
filter/references/alert_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.path}^alert##{alert.iid}.)")
filter/references/alert_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/alert_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/alert_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/alert_reference_filter_spec.rb:      reference = "#{project.full_path}^alert##{alert.iid}"
filter/references/alert_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: group })
filter/references/alert_reference_filter_spec.rb:      act = "See ^alert##{alert.iid}"
filter/references/alert_reference_filter_spec.rb:      markdown = "#{alert_reference} ^alert#2 ^alert#3 ^alert#4 #{alert2_reference}"
filter/references/milestone_reference_filter_spec.rb:      it "ignores valid references contained inside '#{elem}' element" do
filter/references/milestone_reference_filter_spec.rb:        act = "<#{elem}>milestone #{reference}</#{elem}>"
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone #{reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone #{reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone #{reference}", only_path: true)
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:      act = "Milestone #{invalidate_reference(reference)}"
filter/references/milestone_reference_filter_spec.rb:    let(:reference) { "#{Milestone.reference_prefix}#{milestone.name}" }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:      expect(doc.text).to eq "See #{milestone.reference_link_text}"
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone <p>#{reference}</p>.")
filter/references/milestone_reference_filter_spec.rb:      act = "Milestone #{Milestone.reference_prefix}#{milestone.name.reverse}"
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:      expect(doc.text).to eq "See #{milestone.reference_link_text}"
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:      act = %(Milestone #{Milestone.reference_prefix}"#{milestone.name.reverse}")
filter/references/milestone_reference_filter_spec.rb:    let(:unquoted_reference) { "#{Milestone.reference_prefix}#{milestone.name}" }
filter/references/milestone_reference_filter_spec.rb:    let(:link_reference) { %(<a href="#{unquoted_reference}">Milestone</a>) }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{link_reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone (#{link_reference}.)")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone #{link_reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{link_reference}")
filter/references/milestone_reference_filter_spec.rb:    let(:unquoted_reference) { "#{Milestone.reference_prefix}#{milestone.name}" }
filter/references/milestone_reference_filter_spec.rb:    let(:link_reference) { %(<a href="#{link}">#{link}</a>) }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{link}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("Milestone #{link_reference}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{link_reference}")
filter/references/milestone_reference_filter_spec.rb:    let(:reference) { "#{another_project.full_path}%#{milestone.iid}" }
filter/references/milestone_reference_filter_spec.rb:    let!(:result) { reference_filter("See #{reference}") }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:        .to eq("#{milestone.reference_link_text} in #{another_project.full_path}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:        .to eq("See (#{milestone.reference_link_text} in #{another_project.full_path}.)")
filter/references/milestone_reference_filter_spec.rb:        allow(instance).to receive(:title).and_return(%("></a>whatever<a title="))
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:        .to eq "#{milestone.reference_link_text} in #{another_project.full_path}"
filter/references/milestone_reference_filter_spec.rb:    let(:reference) { "#{another_project.full_path}%#{milestone.iid}" }
filter/references/milestone_reference_filter_spec.rb:    let!(:result) { reference_filter("See #{reference}") }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:        .to eq("#{milestone.reference_link_text} in #{another_project.path}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:        .to eq("See (#{milestone.reference_link_text} in #{another_project.path}.)")
filter/references/milestone_reference_filter_spec.rb:        allow(instance).to receive(:title).and_return(%("></a>whatever<a title="))
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:        .to eq "#{milestone.reference_link_text} in #{another_project.path}"
filter/references/milestone_reference_filter_spec.rb:    let(:reference) { "#{another_project.path}%#{milestone.iid}" }
filter/references/milestone_reference_filter_spec.rb:    let!(:result) { reference_filter("See #{reference}") }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:        .to eq("#{milestone.reference_link_text} in #{another_project.path}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/milestone_reference_filter_spec.rb:        .to eq("See (#{milestone.reference_link_text} in #{another_project.path}.)")
filter/references/milestone_reference_filter_spec.rb:        allow(instance).to receive(:title).and_return(%("></a>whatever<a title="))
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:        .to eq "#{milestone.reference_link_text} in #{another_project.path}"
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter('See %"&lt;html&gt;"')
filter/references/milestone_reference_filter_spec.rb:      act = %(Milestone %"&lt;non valid&gt;")
filter/references/milestone_reference_filter_spec.rb:      absolute_reference = "/#{reference}"
filter/references/milestone_reference_filter_spec.rb:      result = reference_filter("See #{absolute_reference}")
filter/references/milestone_reference_filter_spec.rb:      expect(result.content).to eq "See %#{milestone.title}"
filter/references/milestone_reference_filter_spec.rb:      let(:resource_text) { "#{resource.class.reference_prefix}#{resource.title}" }
filter/references/milestone_reference_filter_spec.rb:      let(:resource_text) { "#{resource.class.reference_prefix}#{resource.title}" }
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{Milestone.reference_prefix}#{milestone.iid}")
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{urls.milestone_url(milestone)}")
filter/references/milestone_reference_filter_spec.rb:      input_text = "See #{project_reference}#{reference}"
filter/references/milestone_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/milestone_reference_filter_spec.rb:        reference = "#{project.full_path}%#{milestone.iid}"
filter/references/milestone_reference_filter_spec.rb:        result = reference_filter("See #{reference}", context)
filter/references/milestone_reference_filter_spec.rb:        act = "See %#{milestone.iid}"
filter/references/milestone_reference_filter_spec.rb:        let(:reference) { "#{project.full_path}%#{milestone.iid}" }
filter/references/milestone_reference_filter_spec.rb:            reference = "%#{milestone.title}"
filter/references/milestone_reference_filter_spec.rb:            result = reference_filter("See #{reference}", { project: nil, group: sub_group })
filter/references/milestone_reference_filter_spec.rb:            reference = "/#{milestone.group.full_path}%#{milestone.title}"
filter/references/milestone_reference_filter_spec.rb:            result = reference_filter("See #{reference}", { project: nil, group: sub_group })
filter/references/milestone_reference_filter_spec.rb:            expect(result.content).to eq "See %#{milestone.title}"
filter/references/milestone_reference_filter_spec.rb:        act = "See %#{group_milestone.iid}"
filter/references/milestone_reference_filter_spec.rb:        links = reference_filter("See #{milestone.to_reference(full: true)} and #{group_milestone.to_reference}", context).css('a')
filter/references/milestone_reference_filter_spec.rb:        doc = reference_filter("See /#{milestone.to_reference(full: true)} and /#{group_milestone.to_reference(full: true)}", context)
filter/references/milestone_reference_filter_spec.rb:        doc = reference_filter("See /#{group_milestone.to_reference(full: true)} and /#{subgroup_milestone.to_reference(full: true)}", context)
filter/references/milestone_reference_filter_spec.rb:    let_it_be(:group2_reference)   { "#{project2.full_path}%\"#{group2_milestone.name}\"" }
filter/references/milestone_reference_filter_spec.rb:      markdown = "#{project_reference} %qwert %werty %ertyu %rtyui #{project_reference2}"
filter/references/milestone_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference}"
filter/references/milestone_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference} #{project_reference2}"
filter/references/milestone_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference} #{project2_reference} #{project3.full_path}%test_milestone"
filter/references/milestone_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference} #{project2.full_path}%#{project2_milestone.iid} #{project3.full_path}%test_milestone"
filter/references/label_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/label_reference_filter_spec.rb:      act = "<#{elem}>Label #{reference}</#{elem}>"
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:    reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:      reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:    labels_markdown = Array.new(10, "Label #{reference}").join('\n')
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("Label #{reference}", only_path: true)
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("Label #{reference}", only_path: true)
filter/references/label_reference_filter_spec.rb:    doc = reference_filter("Label #{reference}", { only_path: true, label_url_method: "project_merge_requests_url" })
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:      act = "Label #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:    let(:reference) { "#{Label.reference_prefix}#{label.name}" }
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}).")
filter/references/label_reference_filter_spec.rb:      act = "Label #{Label.reference_prefix}#{label.name.reverse}"
filter/references/label_reference_filter_spec.rb:    let(:reference) { "#{Label.reference_prefix}#{label.name}" }
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}).")
filter/references/label_reference_filter_spec.rb:      act = "Label #{Label.reference_prefix}#{label.id}#{label.name.reverse}"
filter/references/label_reference_filter_spec.rb:    let(:reference) { "#{Label.reference_prefix}#{label.name}" }
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:        doc = filter("Label #{reference}#{trailing_punctuation}")
filter/references/label_reference_filter_spec.rb:      act = "Label #{Label.reference_prefix}#{label.name.reverse}"
filter/references/label_reference_filter_spec.rb:      exp = "Label #{Label.reference_prefix}&amp;mf.g?"
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:      act = %(Label #{Label.reference_prefix}"#{label.name.reverse}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:      act = "Label #{Label.reference_prefix}#{label.id}#{label.name.reverse}"
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:      act = %(Label #{Label.reference_prefix}"#{label.name.reverse}")
filter/references/label_reference_filter_spec.rb:      exp = %(Label #{Label.reference_prefix}"?secnerefer &amp; mf.g\")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter('See ~"&lt;html&gt;"')
filter/references/label_reference_filter_spec.rb:      act = %(Label #{Label.reference_prefix}"&lt;non valid&gt;")
filter/references/label_reference_filter_spec.rb:    let(:bug_reference) { "#{Label.reference_prefix}#{bug.name}" }
filter/references/label_reference_filter_spec.rb:      let(:references) { "#{bug_reference}, #{feature_proposal_reference}, #{technical_debt_reference}" }
filter/references/label_reference_filter_spec.rb:        doc = reference_filter("See #{references}")
filter/references/label_reference_filter_spec.rb:      let(:references) { "#{bug_reference} #{feature_proposal_reference} #{technical_debt_reference}" }
filter/references/label_reference_filter_spec.rb:        doc = reference_filter("See #{references}")
filter/references/label_reference_filter_spec.rb:      act = '(format nil "~0f" 3.0) ; 3.0'
filter/references/label_reference_filter_spec.rb:    let(:reference) { %(<a href="#{label.to_reference}">Label</a>) }
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("Label #{reference}")
filter/references/label_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/label_reference_filter_spec.rb:        doc = reference_filter("See #{reference}", project: project)
filter/references/label_reference_filter_spec.rb:        doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:        act = %(Label #{Label.reference_prefix}"#{group_label.name.reverse}")
filter/references/label_reference_filter_spec.rb:      let(:reference) { "#{project.to_reference_base}#{group_label.to_reference(format: :name)}" }
filter/references/label_reference_filter_spec.rb:        doc = reference_filter("See #{reference}", project: project)
filter/references/label_reference_filter_spec.rb:        expect(doc.text).to eq "See gfm references"
filter/references/label_reference_filter_spec.rb:        doc = reference_filter("Label (#{reference}.)")
filter/references/label_reference_filter_spec.rb:        act = %(Label #{project.to_reference_base}#{Label.reference_prefix}"#{group_label.name.reverse}")
filter/references/label_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}~#{label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)   { reference_filter("See #{reference}") }
filter/references/label_reference_filter_spec.rb:      expect(result.css('a').first.text).to eq "#{label.name} in #{project2.full_name}"
filter/references/label_reference_filter_spec.rb:      expect(result.text).to eq "See #{label.name} in #{project2.full_name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}~#{label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)   { reference_filter("See #{reference}") }
filter/references/label_reference_filter_spec.rb:      expect(result.css('a').first.text).to eq "#{label.name} in #{project2.name}"
filter/references/label_reference_filter_spec.rb:      expect(result.text).to eq "See #{label.name} in #{project2.name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:    let(:reference) { "#{project2.path}~#{label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)   { reference_filter("See #{reference}") }
filter/references/label_reference_filter_spec.rb:      expect(result.css('a').first.text).to eq "#{label.name} in #{project2.name}"
filter/references/label_reference_filter_spec.rb:      expect(result.text).to eq "See #{label.name} in #{project2.name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:    let(:reference)        { "#{another_project.full_path}~#{group_label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)          { reference_filter("See #{reference}", project: project) }
filter/references/label_reference_filter_spec.rb:        .to eq "#{group_label.name} in #{another_project.full_name}"
filter/references/label_reference_filter_spec.rb:        .to eq "See #{group_label.name} in #{another_project.full_name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:        another_group.name = "<img src=x onerror=alert(1)>"
filter/references/label_reference_filter_spec.rb:          .to eq "See #{group_label.name} in #{another_project.full_name}"
filter/references/label_reference_filter_spec.rb:    let(:reference)        { "#{another_project.full_path}~#{group_label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)          { reference_filter("See #{reference}", project: project) }
filter/references/label_reference_filter_spec.rb:        .to eq "#{group_label.name} in #{another_project.name}"
filter/references/label_reference_filter_spec.rb:        .to eq "See #{group_label.name} in #{another_project.name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:    let(:reference)   { "#{project.full_path}~#{group_label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)     { reference_filter("See #{reference}", project: project) }
filter/references/label_reference_filter_spec.rb:      expect(result.text).to eq "See #{group_label.name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:    let(:reference)   { "#{project.path}~#{group_label.name}" }
filter/references/label_reference_filter_spec.rb:    let!(:result)     { reference_filter("See #{reference}", project: project) }
filter/references/label_reference_filter_spec.rb:      expect(result.text).to eq "See #{group_label.name}"
filter/references/label_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/label_reference_filter_spec.rb:      reference = "~#{label.name}"
filter/references/label_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: group, label_url_method: :group_url })
filter/references/label_reference_filter_spec.rb:      reference = "~#{label.name}"
filter/references/label_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: subgroup, label_url_method: :group_url })
filter/references/label_reference_filter_spec.rb:      reference = "#{project.full_path}~#{label.name}"
filter/references/label_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: group })
filter/references/label_reference_filter_spec.rb:      expect(result.css('a').first.text).to eq "#{label.name} in #{project.full_name}"
filter/references/label_reference_filter_spec.rb:      absolute_reference = "/#{reference}"
filter/references/label_reference_filter_spec.rb:      result = reference_filter("See #{absolute_reference}", context)
filter/references/label_reference_filter_spec.rb:      expect(result.content).to eq "See #{group_label.name}"
filter/references/label_reference_filter_spec.rb:      absolute_reference = "/#{reference}"
filter/references/label_reference_filter_spec.rb:      result = reference_filter("See #{absolute_reference}", context)
filter/references/label_reference_filter_spec.rb:      expect(result.content).to eq "See #{project_label.name}"
filter/references/label_reference_filter_spec.rb:      let(:reference) { "#{project.full_path}~#{project_label.name}" }
filter/references/label_reference_filter_spec.rb:      let_it_be(:reference) { "#{group.full_path}~#{group_label.name}" }
filter/references/label_reference_filter_spec.rb:        let_it_be(:reference) { "#{project.full_path}~#{project_label.name}" }
filter/references/label_reference_filter_spec.rb:        reference = "/#{project.full_path}~#{parent_group_label.name}"
filter/references/label_reference_filter_spec.rb:        result = reference_filter("See #{reference}", context)
filter/references/label_reference_filter_spec.rb:        expect(result.to_html).to include "See #{reference}"
filter/references/label_reference_filter_spec.rb:        reference = "#{another_group.full_path}~#{group_label.name}"
filter/references/label_reference_filter_spec.rb:        result = reference_filter("See #{reference}", context)
filter/references/label_reference_filter_spec.rb:        expect(result.to_html).to include "See #{reference}"
filter/references/label_reference_filter_spec.rb:        reference = "#{group.full_path}~#{label_name}"
filter/references/label_reference_filter_spec.rb:        result = reference_filter("See #{reference}", context)
filter/references/label_reference_filter_spec.rb:        reference = "#{group.full_path}~#{label_name}"
filter/references/label_reference_filter_spec.rb:        result = reference_filter("See #{reference}", context)
filter/references/label_reference_filter_spec.rb:        reference = "/#{group.full_path}~#{parent_group_label.name}"
filter/references/label_reference_filter_spec.rb:        result = reference_filter("See #{reference}", context)
filter/references/label_reference_filter_spec.rb:        expect(result.to_html).to include "See #{reference}"
filter/references/label_reference_filter_spec.rb:        let_it_be(:reference) { "#{group.full_path}~#{group_label.name}" }
filter/references/label_reference_filter_spec.rb:    let_it_be(:group2_reference)   { "#{project2.full_path}~#{group2_label.name}" }
filter/references/label_reference_filter_spec.rb:      markdown = "#{project_reference} ~qwert ~werty ~ertyu ~rtyui #{project_reference2}"
filter/references/label_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference}"
filter/references/label_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference} #{project2_reference}"
filter/references/label_reference_filter_spec.rb:      markdown = "#{project_reference} #{group2_reference} #{project2_reference} #{project3.full_path}~test_label"
filter/references/reference_filter_spec.rb:      document = Nokogiri::HTML.fragment('<a href="foo">foo</a>')
filter/references/reference_filter_spec.rb:      document = Nokogiri::HTML.fragment('<a href="foo">foo</a>')
filter/references/reference_filter_spec.rb:    it 'skips links with a "gfm" class' do
filter/references/reference_filter_spec.rb:      document = Nokogiri::HTML.fragment('<a href="foo" class="gfm">foo</a>')
filter/references/reference_filter_spec.rb:      document = Nokogiri::HTML.fragment('<span class="idiff">foo</span>')
filter/references/reference_filter_spec.rb:      document = Nokogiri::HTML.fragment('<a href="foo">foo</a>')
filter/references/reference_filter_spec.rb:    let(:document) { Nokogiri::HTML.fragment('<p data-sourcepos="1:1-1:18"></p>') }
filter/references/reference_filter_spec.rb:    let(:nodes) { [{ value: "1" }, { value: "2" }, { value: "3" }] }
filter/references/reference_filter_spec.rb:    let(:expected_nodes) { [{ value: "1.1" }, { value: "1.2" }, { value: "1.3" }, { value: "2.1" }, { value: "2.2" }, { value: "2.3" }, { value: "3.1" }, { value: "3.2" }, { value: "3.3" }] }
filter/references/reference_filter_spec.rb:        0 => [{ value: "1.1" }, { value: "1.2" }, { value: "1.3" }],
filter/references/reference_filter_spec.rb:        2 => [{ value: "3.1" }, { value: "3.2" }, { value: "3.3" }],
filter/references/reference_filter_spec.rb:        1 => [{ value: "2.1" }, { value: "2.2" }, { value: "2.3" }]
filter/references/reference_filter_spec.rb:      let(:html) { %(text <a href="reference_url" class="gfm gfm-user" title="reference">Reference</a>) }
filter/references/reference_filter_spec.rb:    let(:node) { Nokogiri::HTML.fragment('<a href="link">end text</a>') }
filter/references/reference_filter_spec.rb:    let(:document) { Nokogiri::HTML.fragment('<a href="foo">foo</a>') }
filter/references/reference_filter_spec.rb:    let(:document) { Nokogiri::HTML.fragment('<a href="foo">foo</a>') }
filter/references/reference_filter_spec.rb:    let_it_be(:document) { Nokogiri::HTML.fragment('<a href="foo">foo</a>') }
filter/references/reference_filter_spec.rb:    let(:document) { Nokogiri::HTML.fragment('<a href="foo">foo</a>') }
filter/references/design_reference_filter_spec.rb:  let(:input_text)   { "Added #{design_url}" }
filter/references/design_reference_filter_spec.rb:    context "wrapped in a block <#{elem}/>" do
filter/references/design_reference_filter_spec.rb:      let(:input_text) { "<#{elem}>Design #{url_for_design(design)}</#{elem}>" }
filter/references/design_reference_filter_spec.rb:    let(:input_text) { "`Design #{url_for_design(design)}`" }
filter/references/design_reference_filter_spec.rb:          ['with <script>console.log("pwded")<%2Fscript>.png'],
filter/references/design_reference_filter_spec.rb:          ['foo"bar.png'],
filter/references/design_reference_filter_spec.rb:          ['A "very" good file.png']
filter/references/design_reference_filter_spec.rb:      ref = "#{design.project.full_path}##{design.issue.iid}[#{design.filename}]"
filter/references/design_reference_filter_spec.rb:      #  * SELECT "issues".* FROM "issues" WHERE "issues"."project_id" = 1 AND ...
filter/references/design_reference_filter_spec.rb:      #  * SELECT "_designs".* FROM "_designs"
filter/references/commit_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/commit_reference_filter_spec.rb:      act = "<#{elem}>Commit #{commit.id}</#{elem}>"
filter/references/commit_reference_filter_spec.rb:      it "links to a valid reference of #{size} characters" do
filter/references/commit_reference_filter_spec.rb:        doc = reference_filter("See #{reference[0...size]}")
filter/references/commit_reference_filter_spec.rb:    it "does not render link when reference is ending a word" do
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("Hello Wo#{reference[0...7]}")
filter/references/commit_reference_filter_spec.rb:    it "does not render link when reference is starting a word" do
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("Hello #{reference[0...7]}ld")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{commit.id}")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eq "See #{commit.short_id}"
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{commit.id[0...7]}")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eq "See #{commit.short_id}"
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      act = "See #{invalid}"
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:        allow(instance).to receive(:title).and_return(%("></a>whatever<a title="))
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eq "See #{commit.short_id}"
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}", only_path: true)
filter/references/commit_reference_filter_spec.rb:    context "in merge request context" do
filter/references/commit_reference_filter_spec.rb:        doc = reference_filter("See #{reference}", noteable: noteable)
filter/references/commit_reference_filter_spec.rb:      context "a doc with many (29) strings that could be SHAs" do
filter/references/commit_reference_filter_spec.rb:          reference_filter("A big list of SHAs #{oids.join(', ')}", noteable: noteable)
filter/references/commit_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}@#{commit.short_id}" }
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.full_path}@#{commit.short_id}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.full_path}@#{commit.short_id}.)")
filter/references/commit_reference_filter_spec.rb:      let(:reference) { "/#{namespace.full_path}@#{commit.short_id}" }
filter/references/commit_reference_filter_spec.rb:        doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:        expect(doc.text).to eql("See (/#{namespace.full_path}@#{commit.short_id}.)")
filter/references/commit_reference_filter_spec.rb:      act = "Committed #{invalidate_reference(reference)}"
filter/references/commit_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}@#{commit.short_id}" }
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}@#{commit.short_id}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.path}@#{commit.short_id}.)")
filter/references/commit_reference_filter_spec.rb:      act = "Committed #{invalidate_reference(reference)}"
filter/references/commit_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}@#{commit.short_id}" }
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}@#{commit.short_id}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.path}@#{commit.short_id}.)")
filter/references/commit_reference_filter_spec.rb:      act = "Committed #{invalidate_reference(reference)}"
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_reference_filter_spec.rb:      act = "Committed #{invalidate_reference(reference)}"
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eq("See #{commit.reference_link_text(project)} (patch)")
filter/references/commit_reference_filter_spec.rb:      invalidate_commit_reference = reference_filter("#{link}/builds.patch")
filter/references/commit_reference_filter_spec.rb:      doc = reference_filter("See (#{invalidate_commit_reference})")
filter/references/commit_reference_filter_spec.rb:      expect(doc.css('a').first.attr('href')).to eq "#{link}/builds"
filter/references/commit_reference_filter_spec.rb:      expect(doc.text).to eq("See (#{commit.reference_link_text(project)} (builds).patch)")
filter/references/commit_reference_filter_spec.rb:      act = "See #{commit.id}"
filter/references/commit_reference_filter_spec.rb:      act = "See #{project.full_path}@#{commit.id}"
filter/references/commit_reference_filter_spec.rb:      expect(reference_filter(act, context).css('a').first.text).to eql("#{project.full_path}@#{commit.short_id}")
filter/references/commit_reference_filter_spec.rb:      stub_const("Banzai::Filter::References::AbstractReferenceFilter::RENDER_TIMEOUT", 0.1)
filter/references/commit_reference_filter_spec.rb:      markdown = "#{commit_reference} 8b95f2f1 8b95f2f2 8b95f2f3 #{commit2_reference} #{commit3_reference}"
filter/references/commit_reference_filter_spec.rb:    let(:text) { "#{commit.id} #{commit.id} #{commit.id}" }
filter/references/commit_reference_filter_spec.rb:    let(:ends_with) { "</a> #{commit.id}" }
filter/references/external_issue_reference_filter_spec.rb:  shared_examples_for "external issue tracker" do
filter/references/external_issue_reference_filter_spec.rb:      it "ignores valid references contained inside '#{elem}' element" do
filter/references/external_issue_reference_filter_spec.rb:        exp = act = "<#{elem}>Issue #{reference}</#{elem}>"
filter/references/external_issue_reference_filter_spec.rb:      exp = act = "Issue #{reference}"
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}")
filter/references/external_issue_reference_filter_spec.rb:      issue_id = doc.css('a').first.attr("data-external-issue")
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}")
filter/references/external_issue_reference_filter_spec.rb:      issue_id = doc.css('a').first.attr("data-external-issue")
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue (#{reference}.)")
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}")
filter/references/external_issue_reference_filter_spec.rb:      expect(doc.css('a').first.attr('title')).to include("Issue in #{project.external_issue_tracker.title}")
filter/references/external_issue_reference_filter_spec.rb:        .and_return(%("></a>whatever<a title="))
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}")
filter/references/external_issue_reference_filter_spec.rb:      expect(doc.text).to eq "Issue #{reference}"
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}")
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}", only_path: true)
filter/references/external_issue_reference_filter_spec.rb:      issue_id = doc.css('a').first["data-external-issue"]
filter/references/external_issue_reference_filter_spec.rb:      expect_any_instance_of(project.external_issue_tracker.class).to receive(:issue_url) { 'javascript:alert("foo");' }
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}")
filter/references/external_issue_reference_filter_spec.rb:      expect_any_instance_of(project.external_issue_tracker.class).to receive(:issue_path) { 'javascript:alert("foo");' }
filter/references/external_issue_reference_filter_spec.rb:      doc = filter("Issue #{reference}", only_path: true)
filter/references/external_issue_reference_filter_spec.rb:        not_cached = reference_filter.call("look for #{reference}", { project: project })
filter/references/external_issue_reference_filter_spec.rb:        cached = reference_filter.call("look for #{reference}", { project: project })
filter/references/external_issue_reference_filter_spec.rb:      let(:text) { "#{reference} #{reference} #{reference}" }
filter/references/external_issue_reference_filter_spec.rb:      let(:ends_with) { "</a> #{reference}" }
filter/references/external_issue_reference_filter_spec.rb:  context "redmine project" do
filter/references/external_issue_reference_filter_spec.rb:    context "with a hash prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("#123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with a single-letter prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("T-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:  context "youtrack project" do
filter/references/external_issue_reference_filter_spec.rb:    context "with right markdown" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("YT-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with underscores in the prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("PRJ_1-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with lowercase letters in the prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("YTkPrj-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with a single-letter prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("T-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with a lowercase prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("gl-030", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:  context "clickup project" do
filter/references/external_issue_reference_filter_spec.rb:    context "with right markdown" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("PRJ-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with underscores in the prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("PRJ_1-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with a hash prefix and alphanumeric" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("#abcd123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with prefix and alphanumeric" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("CU-abcd123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:  context "jira project" do
filter/references/external_issue_reference_filter_spec.rb:    context "with right markdown" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("JIRA-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "with a single-letter prefix" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("J-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it "ignores reference" do
filter/references/external_issue_reference_filter_spec.rb:        exp = act = "Issue #{reference}"
filter/references/external_issue_reference_filter_spec.rb:    context "with wrong markdown" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("#123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it "ignores reference" do
filter/references/external_issue_reference_filter_spec.rb:        exp = act = "Issue #{reference}"
filter/references/external_issue_reference_filter_spec.rb:      context "with right markdown" do
filter/references/external_issue_reference_filter_spec.rb:        let(:issue) { ExternalIssue.new("JIRA-123", project) }
filter/references/external_issue_reference_filter_spec.rb:        it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:      context "with a single-letter prefix" do
filter/references/external_issue_reference_filter_spec.rb:        let(:issue) { ExternalIssue.new("J-123", project) }
filter/references/external_issue_reference_filter_spec.rb:        it "ignores reference" do
filter/references/external_issue_reference_filter_spec.rb:          exp = act = "Issue #{reference}"
filter/references/external_issue_reference_filter_spec.rb:      context "with wrong markdown" do
filter/references/external_issue_reference_filter_spec.rb:        let(:issue) { ExternalIssue.new("#123", project) }
filter/references/external_issue_reference_filter_spec.rb:        it "ignores reference" do
filter/references/external_issue_reference_filter_spec.rb:          exp = act = "Issue #{reference}"
filter/references/external_issue_reference_filter_spec.rb:  context "ewm project" do
filter/references/external_issue_reference_filter_spec.rb:    context "rtcwi keyword" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("rtcwi 123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "workitem keyword" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("workitem 123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "defect keyword" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("defect 123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "task keyword" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("task 123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    context "bug keyword" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("bug 123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:  context "phorge project" do
filter/references/external_issue_reference_filter_spec.rb:    context "with right markdown" do
filter/references/external_issue_reference_filter_spec.rb:      let(:issue) { ExternalIssue.new("T123", project) }
filter/references/external_issue_reference_filter_spec.rb:      it_behaves_like "external issue tracker"
filter/references/external_issue_reference_filter_spec.rb:    let_it_be(:issue1) { ExternalIssue.new("#123", project) }
filter/references/external_issue_reference_filter_spec.rb:    let_it_be(:issue2) { ExternalIssue.new("YT-123", project) }
filter/references/external_issue_reference_filter_spec.rb:      single_reference = "External Issue #{issue1.to_reference}"
filter/references/external_issue_reference_filter_spec.rb:      multiple_references = "External Issues #{issue1.to_reference} and #{issue2.to_reference}"
filter/references/work_item_reference_filter_spec.rb:                       "/#{item.project.namespace.path}/#{item.project.path}/-/work_items/#{item.iid}"
filter/references/work_item_reference_filter_spec.rb:                       "/groups/#{item.namespace.path}/-/work_items/#{item.iid}"
filter/references/work_item_reference_filter_spec.rb:    "http://#{Gitlab.config.gitlab.host}#{work_item_path}"
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Fixed #{reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Fixed #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{written_reference}.)")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      work_item.update_attribute(:title, %("></a>whatever<a title="))
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter(%(<a href="#{written_reference}">#{inner_html}</a>))
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}+")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{work_item_url}+")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{work_item_url}+s")
filter/references/work_item_reference_filter_spec.rb:      href = "#{written_reference}st"
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("<a href='#{href}'></a>")
filter/references/work_item_reference_filter_spec.rb:  #   "See http://localhost/cross-namespace/cross-project/-/work_items/1"
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:  #   "See http://localhost/cross-namespace/cross-project/-/work_items/1#note_123"
filter/references/work_item_reference_filter_spec.rb:    let_it_be(:reference)     { "#{work_item_url}#note_123" }
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{work_item_url}/.)")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/work_item_reference_filter_spec.rb:  #   'See <a href=\"http://localhost/cross-namespace/cross-project/-/work_items/1\">Reference</a>''
filter/references/work_item_reference_filter_spec.rb:    let_it_be(:reference_link)    { %(<a href="#{reference}">Reference</a>) }
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/work_item_reference_filter_spec.rb:        doc = reference_filter("See #{work_item_url}", context)
filter/references/work_item_reference_filter_spec.rb:        doc = reference_filter("See #{work_item_url}", context)
filter/references/work_item_reference_filter_spec.rb:        expect(link.text).to eq("##{work_item.iid}")
filter/references/work_item_reference_filter_spec.rb:        doc = reference_filter("See #{work_item.to_reference}", context)
filter/references/work_item_reference_filter_spec.rb:        expect(link.text).to eq("##{work_item.iid}")
filter/references/work_item_reference_filter_spec.rb:        doc = reference_filter("See #{work_item.to_reference(full: true)}", context)
filter/references/work_item_reference_filter_spec.rb:        expect(link.text).to eq("##{work_item.iid}")
filter/references/work_item_reference_filter_spec.rb:          doc = reference_filter("See #{work_item.to_reference(full: true)}", group: create(:group))
filter/references/work_item_reference_filter_spec.rb:          expect(link.text).to eq("#{group.full_path}##{work_item.iid}")
filter/references/work_item_reference_filter_spec.rb:      reference = "#{work_item_url}#note_123"
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{reference}", context)
filter/references/work_item_reference_filter_spec.rb:      expect(link.attr('href')).to eq("#{work_item_url}#note_123")
filter/references/work_item_reference_filter_spec.rb:      expect(link.text).to include("#{project.full_path}##{work_item.iid}")
filter/references/work_item_reference_filter_spec.rb:      reference = "#{work_item_url}#note_123"
filter/references/work_item_reference_filter_spec.rb:      reference_link = %(<a href="#{reference}">Reference</a>)
filter/references/work_item_reference_filter_spec.rb:      doc = reference_filter("See #{reference_link}", context)
filter/references/work_item_reference_filter_spec.rb:      expect(link.attr('href')).to eq("#{work_item_url}#note_123")
filter/references/work_item_reference_filter_spec.rb:      single_reference = "Work item #{work_item.to_reference}"
filter/references/work_item_reference_filter_spec.rb:      multiple_references = "Work items #{work_item.to_reference} and #{another_work_item.to_reference}"
filter/references/user_reference_filter_spec.rb:  let(:subject_name) { "user" }
filter/references/user_reference_filter_spec.rb:    act = "Hey #{invalidate_reference(reference)}"
filter/references/user_reference_filter_spec.rb:    act = "Hey foo#{reference}"
filter/references/user_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/user_reference_filter_spec.rb:      act = "<#{elem}>Hey #{reference}</#{elem}>"
filter/references/user_reference_filter_spec.rb:        doc = reference_filter("Hey #{reference}", author: project.creator)
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}", author: user)
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}", author: user)
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/user_reference_filter_spec.rb:    doc = reference_filter("Mention me (#{reference}.)")
filter/references/user_reference_filter_spec.rb:    doc = reference_filter("Hey #{reference}")
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/user_reference_filter_spec.rb:        doc = reference_filter("Hey #{reference}", skip_project_check: true)
filter/references/user_reference_filter_spec.rb:        doc = reference_filter("Hey #{User.reference_prefix}all", skip_project_check: true)
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}", context)
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}", context)
filter/references/user_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}", context)
filter/references/user_reference_filter_spec.rb:      document = Nokogiri::HTML.fragment("<p>#{get_reference(user)}</p>")
filter/references/user_reference_filter_spec.rb:      document = Nokogiri::HTML.fragment("<p>#{get_reference(user)}</p>")
filter/references/user_reference_filter_spec.rb:      markdown = "#{reference} @qwertyuiopzx @wertyuio @ertyu @rtyui #{reference2} #{reference3}"
filter/references/user_reference_filter_spec.rb:    let(:text) { "#{reference} #{reference} #{reference}" }
filter/references/user_reference_filter_spec.rb:    let(:ends_with) { "</a> #{reference}" }
filter/references/reference_cache_spec.rb:  let_it_be(:doc)      { Nokogiri::HTML.fragment("#{issue1.to_reference} #{issue2.to_reference} #{issue3.to_reference(full: true)}") }
filter/references/reference_cache_spec.rb:        doc_milestone = Nokogiri::HTML.fragment("/#{milestone1.to_reference(full: true)} /#{milestone2.to_reference(full: true)} #{milestone3.to_reference(full: true)}")
filter/references/reference_cache_spec.rb:          "/#{group.full_path}" => [{ milestone_iid: nil, milestone_name: milestone1.title, absolute_path: true }].to_set,
filter/references/reference_cache_spec.rb:          "/#{subgroup.full_path}" => [{ milestone_iid: nil, milestone_name: milestone2.title, absolute_path: true }].to_set,
filter/references/reference_cache_spec.rb:          "/#{group.full_path}" => group,
filter/references/reference_cache_spec.rb:          "/#{subgroup.full_path}" => subgroup,
filter/references/reference_cache_spec.rb:      doc_single = Nokogiri::HTML.fragment("#1")
filter/references/reference_cache_spec.rb:        project_path = "/#{project.full_path}"
filter/references/reference_cache_spec.rb:        group_path = "/#{subgroup.full_path}"
filter/references/reference_cache_spec.rb:      expect(cache.full_project_path(nil, 'cool')).to eq "#{project.namespace.full_path}/cool"
filter/references/reference_cache_spec.rb:      match = "/something/cool".match(Project.reference_pattern)
filter/references/issue_reference_filter_spec.rb:  let(:issue_path) { "/#{issue.project.namespace.path}/#{issue.project.path}/-/issues/#{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:  let(:issue_url) { "http://#{Gitlab.config.gitlab.host}#{issue_path}" }
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed #{reference}")
filter/references/issue_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/issue_reference_filter_spec.rb:      act = "<#{elem}>Issue #{issue.to_reference}</#{elem}>"
filter/references/issue_reference_filter_spec.rb:      single_reference = "Issue #{issue.to_reference}"
filter/references/issue_reference_filter_spec.rb:      multiple_references = "Issues #{issue.to_reference} and #{another_issue.to_reference}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{written_reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.text).to eql("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      act = "Fixed #{invalid}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      issue.update_attribute(:title, %("></a>whatever<a title="))
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      expect(doc.text).to eq "Issue #{reference}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{written_reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter(%(<a href="#{written_reference}">#{inner_html}</a>))
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}+")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{issue_url}+")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{issue_url}+s")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Issue #{written_reference}", only_path: true)
filter/references/issue_reference_filter_spec.rb:      href = "#{written_reference}st"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("<a href='#{href}'></a>")
filter/references/issue_reference_filter_spec.rb:    let(:written_reference) { "##{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:    let(:reference) { "##{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:    let(:written_reference) { "GL-#{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:    let(:reference) { "##{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}##{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:      act = "Issue #{reference}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.full_path}##{issue.iid}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.text).to eq("Fixed (#{project2.full_path}##{issue.iid}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      act = "Fixed #{invalidate_reference(reference)}"
filter/references/issue_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}##{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:      act = "Issue #{reference}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}##{issue.iid}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.text).to eq("Fixed (#{project2.path}##{issue.iid}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      act = "Fixed #{invalidate_reference(reference)}"
filter/references/issue_reference_filter_spec.rb:    let(:reference) { "#{project2.path}##{issue.iid}" }
filter/references/issue_reference_filter_spec.rb:      act = "Issue #{reference}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}##{issue.iid}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      expect(doc.text).to eq("Fixed (#{project2.path}##{issue.iid}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      act = "Fixed #{invalidate_reference(reference)}"
filter/references/issue_reference_filter_spec.rb:    let(:reference) { issue_url + "#note_123" }
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{issue_url + '/'}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/issue_reference_filter_spec.rb:    let(:reference_link) { %(<a href="#{reference}">Reference</a>) }
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference_link}")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference_link}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference_link}.)")
filter/references/issue_reference_filter_spec.rb:    let(:reference_link) { %(<a href="#{reference}">Reference</a>) }
filter/references/issue_reference_filter_spec.rb:    let(:reference) { (issue_url + "#note_123").to_s }
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference_link}")
filter/references/issue_reference_filter_spec.rb:        .to eq issue_url + "#note_123"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference_link}.)")
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference_link}.)")
filter/references/issue_reference_filter_spec.rb:    let(:input_text) { "See #{designs_tab_url}" }
filter/references/issue_reference_filter_spec.rb:    it 'includes the word "designs" after the reference in the text content', :aggregate_failures do
filter/references/issue_reference_filter_spec.rb:      expect(link.text).to eq("#{issue.to_reference} (designs)")
filter/references/issue_reference_filter_spec.rb:      reference = "##{issue.iid}"
filter/references/issue_reference_filter_spec.rb:      text = "Fixed #{reference}"
filter/references/issue_reference_filter_spec.rb:      reference = "#{project.full_path}##{issue.iid}"
filter/references/issue_reference_filter_spec.rb:      text = "Issue #{reference}"
filter/references/issue_reference_filter_spec.rb:      reference = "#{project.full_path}##{issue.iid}"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference}", context)
filter/references/issue_reference_filter_spec.rb:      expect(link.text).to include("#{project.full_path}##{issue.iid}")
filter/references/issue_reference_filter_spec.rb:      reference = "#{project.path}##{issue.iid}"
filter/references/issue_reference_filter_spec.rb:      text = "See #{reference}"
filter/references/issue_reference_filter_spec.rb:      reference = issue_url + "#note_123"
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference}", context)
filter/references/issue_reference_filter_spec.rb:      expect(link.attr('href')).to eq(issue_url + "#note_123")
filter/references/issue_reference_filter_spec.rb:      expect(link.text).to include("#{project.full_path}##{issue.iid}")
filter/references/issue_reference_filter_spec.rb:      reference = (issue_url + "#note_123").to_s
filter/references/issue_reference_filter_spec.rb:      reference_link = %(<a href="#{reference}">Reference</a>)
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference_link}", context)
filter/references/issue_reference_filter_spec.rb:      expect(link.attr('href')).to eq(issue_url + "#note_123")
filter/references/issue_reference_filter_spec.rb:      reference_link = %(<a href="#{reference}">Reference</a>)
filter/references/issue_reference_filter_spec.rb:      doc = reference_filter("See #{reference_link}", context)
filter/references/issue_reference_filter_spec.rb:    it "doesn't yield invalid references" do
filter/references/issue_reference_filter_spec.rb:    it "doesn't yield unsupported references" do
filter/references/issue_reference_filter_spec.rb:      single_reference = "Issue #{issue1.to_reference}"
filter/references/issue_reference_filter_spec.rb:      multiple_references = "Issues #{issue1.to_reference} and #{issue2.to_reference}"
filter/references/commit_range_reference_filter_spec.rb:  let(:commit1) { project.commit("HEAD~2") }
filter/references/commit_range_reference_filter_spec.rb:  let(:range)  { CommitRange.new("#{commit1.id}...#{commit2.id}", project) }
filter/references/commit_range_reference_filter_spec.rb:  let(:range2) { CommitRange.new("#{commit1.id}..#{commit2.id}", project) }
filter/references/commit_range_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/commit_range_reference_filter_spec.rb:      act = "<#{elem}>Commit Range #{range.to_reference}</#{elem}>"
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference2}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      reference = "#{commit1.short_id}...#{commit2.id}"
filter/references/commit_range_reference_filter_spec.rb:      reference2 = "#{commit1.id}...#{commit2.short_id}"
filter/references/commit_range_reference_filter_spec.rb:      expect(reference_filter("See #{reference}").css('a').first.text).to eq exp
filter/references/commit_range_reference_filter_spec.rb:      expect(reference_filter("See #{reference2}").css('a').first.text).to eq exp
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:      act = "See #{commit1.id.reverse}...#{commit2.id}"
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      expect(doc.css('a').first.attr('title')).to eq ""
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}", only_path: true)
filter/references/commit_range_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}@#{commit1.id}...#{commit2.id}" }
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:        .to eql("#{project2.full_path}@#{commit1.short_id}...#{commit2.short_id}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:      expect(doc.text).to eql("Fixed (#{project2.full_path}@#{commit1.short_id}...#{commit2.short_id}.)")
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.full_path}@#{commit1.id.reverse}...#{commit2.id}"
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.full_path}@#{commit1.id}...#{commit2.id.reverse}"
filter/references/commit_range_reference_filter_spec.rb:    let(:project2)          { create(:project, :public, :repository, path: "same-namespace", namespace: namespace) }
filter/references/commit_range_reference_filter_spec.rb:    let(:reference)         { "#{project2.path}@#{commit1.id}...#{commit2.id}" }
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:        .to eql("#{project2.path}@#{commit1.short_id}...#{commit2.short_id}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:      expect(doc.text).to eql("Fixed (#{project2.path}@#{commit1.short_id}...#{commit2.short_id}.)")
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.path}@#{commit1.id.reverse}...#{commit2.id}"
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.path}@#{commit1.id}...#{commit2.id.reverse}"
filter/references/commit_range_reference_filter_spec.rb:    let(:project2)          { create(:project, :public, :repository, path: "same-namespace", namespace: namespace) }
filter/references/commit_range_reference_filter_spec.rb:    let(:reference)         { "#{project2.path}@#{commit1.id}...#{commit2.id}" }
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:        .to eql("#{project2.path}@#{commit1.short_id}...#{commit2.short_id}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:      expect(doc.text).to eql("Fixed (#{project2.path}@#{commit1.short_id}...#{commit2.short_id}.)")
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.path}@#{commit1.id.reverse}...#{commit2.id}"
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.path}@#{commit1.id}...#{commit2.id.reverse}"
filter/references/commit_range_reference_filter_spec.rb:    let(:range) { CommitRange.new("#{commit1.id}...master", project) }
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/commit_range_reference_filter_spec.rb:      doc = reference_filter("Fixed (#{reference}.)")
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.to_reference_base}@#{commit1.id.reverse}...#{commit2.id}"
filter/references/commit_range_reference_filter_spec.rb:      act = "Fixed #{project2.to_reference_base}@#{commit1.id}...#{commit2.id.reverse}"
filter/references/commit_range_reference_filter_spec.rb:      act = "See #{range.to_reference}"
filter/references/commit_range_reference_filter_spec.rb:      reference = "#{project.full_path}@#{commit1.short_id}...#{commit2.short_id}"
filter/references/commit_range_reference_filter_spec.rb:      expect(reference_filter("See #{reference}", context).css('a').first.text).to eql(reference)
filter/references/commit_range_reference_filter_spec.rb:    let(:text) { "#{range.to_reference} #{range.to_reference} #{range.to_reference}" }
filter/references/commit_range_reference_filter_spec.rb:    let(:ends_with) { "</a> #{range.to_reference}" }
filter/references/snippet_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/snippet_reference_filter_spec.rb:      act = "<#{elem}>Snippet #{reference}</#{elem}>"
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("Snippet (#{reference}.)")
filter/references/snippet_reference_filter_spec.rb:      act = "Snippet #{invalidate_reference(reference)}"
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("Snippet #{reference}")
filter/references/snippet_reference_filter_spec.rb:      snippet.update_attribute(:title, %("></a>whatever<a title="))
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("Snippet #{reference}")
filter/references/snippet_reference_filter_spec.rb:      expect(doc.text).to eq "Snippet #{reference}"
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("Snippet #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("Snippet #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("Snippet #{reference}", only_path: true)
filter/references/snippet_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}$#{snippet.id}" }
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/snippet_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{reference}.)")
filter/references/snippet_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/snippet_reference_filter_spec.rb:      act = "/a_group$12345"
filter/references/snippet_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}$#{snippet.id}" }
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}$#{snippet.id}.)")
filter/references/snippet_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}$#{snippet.id}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}$#{snippet.id}.)")
filter/references/snippet_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.path}$#{snippet.id}.)")
filter/references/snippet_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/snippet_reference_filter_spec.rb:    let(:reference) { "#{project2.path}$#{snippet.id}" }
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}$#{snippet.id}.)")
filter/references/snippet_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("#{project2.path}$#{snippet.id}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{project2.path}$#{snippet.id}.)")
filter/references/snippet_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{project2.path}$#{snippet.id}.)")
filter/references/snippet_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/snippet_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/snippet_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/snippet_reference_filter_spec.rb:      reference = "#{project.full_path}$#{snippet.id}"
filter/references/snippet_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: create(:group) })
filter/references/snippet_reference_filter_spec.rb:      act = "See $#{snippet.id}"
filter/references/snippet_reference_filter_spec.rb:    let(:reference2) { "#{project2.full_path}$#{snippet2.id}" }
filter/references/snippet_reference_filter_spec.rb:      markdown = "#{reference} $9999990"
filter/references/snippet_reference_filter_spec.rb:      markdown = "#{reference} $9999990 $9999991 $9999992 $9999993 #{reference2} something/cool$12"
filter/references/feature_flag_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/feature_flag_reference_filter_spec.rb:      act = "<#{elem}>Feature Flag #{reference}</#{elem}>"
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("Feature Flag (#{reference}.)")
filter/references/feature_flag_reference_filter_spec.rb:      act = "Check [feature_flag:#{non_existing_record_id}]"
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("Feature Flag #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      allow(feature_flag).to receive(:name).and_return(%("></a>whatever<a title="))
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("Feature Flag #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      expect(doc.text).to eq "Feature Flag #{reference}"
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("Feature Flag #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("Feature Flag #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("Feature Flag #{reference}", only_path: true)
filter/references/feature_flag_reference_filter_spec.rb:    let_it_be(:reference) { "[feature_flag:#{project2.full_path}/#{feature_flag.iid}]" }
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/feature_flag_reference_filter_spec.rb:      expect(doc.text).to eql("See (#{reference}.)")
filter/references/feature_flag_reference_filter_spec.rb:      act = "Check [feature_flag:#{non_existing_record_id}]"
filter/references/feature_flag_reference_filter_spec.rb:    let_it_be(:reference) { "[feature_flag:#{project2.full_path}/#{feature_flag.iid}]" }
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See ([feature_flag:#{project2.path}/#{feature_flag.iid}].)")
filter/references/feature_flag_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("[feature_flag:#{project2.path}/#{feature_flag.iid}]")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See ([feature_flag:#{project2.path}/#{feature_flag.iid}].)")
filter/references/feature_flag_reference_filter_spec.rb:      expect(doc.text).to eql("See ([feature_flag:#{project2.path}/#{feature_flag.iid}].)")
filter/references/feature_flag_reference_filter_spec.rb:      act = "Check [feature_flag:#{non_existing_record_id}]"
filter/references/feature_flag_reference_filter_spec.rb:    let_it_be(:reference) { "[feature_flag:#{project2.path}/#{feature_flag.iid}]" }
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See ([feature_flag:#{project2.path}/#{feature_flag.iid}].)")
filter/references/feature_flag_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eql("[feature_flag:#{project2.path}/#{feature_flag.iid}]")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See ([feature_flag:#{project2.path}/#{feature_flag.iid}].)")
filter/references/feature_flag_reference_filter_spec.rb:      expect(doc.text).to eql("See ([feature_flag:#{project2.path}/#{feature_flag.iid}].)")
filter/references/feature_flag_reference_filter_spec.rb:      act = "Check [feature_flag:#{non_existing_record_id}]"
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/feature_flag_reference_filter_spec.rb:      doc = reference_filter("See (#{reference}.)")
filter/references/feature_flag_reference_filter_spec.rb:      act = "See #{invalidate_reference(reference)}"
filter/references/feature_flag_reference_filter_spec.rb:      reference = "[feature_flag:#{project.full_path}/#{feature_flag.iid}]"
filter/references/feature_flag_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: group })
filter/references/feature_flag_reference_filter_spec.rb:      act = "See [feature_flag:#{feature_flag.iid}]"
filter/references/feature_flag_reference_filter_spec.rb:      single_reference = "Feature flag [feature_flag:#{feature_flag1.iid}]"
filter/references/feature_flag_reference_filter_spec.rb:      multiple_references = "Feature flags [feature_flag:#{feature_flag1.iid}] and [feature_flag:#{feature_flag2.iid}]"
filter/references/project_reference_filter_spec.rb:  let(:subject_name) { "project" }
filter/references/project_reference_filter_spec.rb:    act = "Hey #{invalidate_reference(reference)}"
filter/references/project_reference_filter_spec.rb:    it_behaves_like 'fails fast', "mailto:#{'a-' * 499_000}@aaaaaaaa..aaaaaaaa.example.com"
filter/references/project_reference_filter_spec.rb:    doc = reference_filter("Hey #{reference}foo")
filter/references/project_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/project_reference_filter_spec.rb:      act = "<#{elem}>Hey #{CGI.escapeHTML(reference)}</#{elem}>"
filter/references/project_reference_filter_spec.rb:    doc = reference_filter("Hey #{reference}")
filter/references/project_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/project_reference_filter_spec.rb:      doc = reference_filter("Hey #{reference}")
filter/references/project_reference_filter_spec.rb:      document = Nokogiri::HTML.fragment("<p>#{get_reference(project)}</p>")
filter/references/project_reference_filter_spec.rb:      document = Nokogiri::HTML.fragment("<p>#{get_reference(project)}</p>")
filter/references/project_reference_filter_spec.rb:      markdown = "#{normal_project_reference} #{invalidate_reference(normal_project_reference)} #{group_project_reference} #{nested_project_reference}"
filter/references/project_reference_filter_spec.rb:    let(:text) { "#{reference} #{reference} #{reference}" }
filter/references/project_reference_filter_spec.rb:    let(:ends_with) { "</a> #{CGI.escapeHTML(reference)}" }
filter/references/merge_request_reference_filter_spec.rb:    it "ignores valid references contained inside '#{elem}' element" do
filter/references/merge_request_reference_filter_spec.rb:      act = "<#{elem}>Merge #{merge.to_reference}</#{elem}>"
filter/references/merge_request_reference_filter_spec.rb:      single_reference = "Merge request #{merge.to_reference}"
filter/references/merge_request_reference_filter_spec.rb:      multiple_references = "Merge requests #{merge.to_reference} and #{another_merge.to_reference}"
filter/references/merge_request_reference_filter_spec.rb:      expect(tag_el["data-iid"]).to eq(merge.iid.to_s)
filter/references/merge_request_reference_filter_spec.rb:      expect(tag_el["data-project-path"]).to eq(project.full_path)
filter/references/merge_request_reference_filter_spec.rb:      expect(tag_el["class"]).not_to include('has-tooltip')
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      act = "Merge #{invalidate_reference(reference)}"
filter/references/merge_request_reference_filter_spec.rb:      act = "Merge !#{Gitlab::Database::MAX_INT_VALUE + 1}"
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      merge.update_attribute(:title, %("></a>whatever<a title="))
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.text).to eq "Merge #{reference}"
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{reference}+")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{merge_request_url}+")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{merge_request_url}+s")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge #{reference}", only_path: true)
filter/references/merge_request_reference_filter_spec.rb:    let(:reference)         { "#{project2.full_path}!#{merge.iid}" }
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.text).to eq("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      act = "Merge #{invalidate_reference(reference)}"
filter/references/merge_request_reference_filter_spec.rb:    let(:reference) { "#{project2.full_path}!#{merge.iid}" }
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eq("#{project2.path}!#{merge.iid}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.text).to eq("Merge (#{project2.path}!#{merge.iid}.)")
filter/references/merge_request_reference_filter_spec.rb:      act = "Merge #{invalidate_reference(reference)}"
filter/references/merge_request_reference_filter_spec.rb:    let(:reference) { "#{project2.path}!#{merge.iid}" }
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.css('a').first.text).to eq("#{project2.path}!#{merge.iid}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.text).to eq("Merge (#{project2.path}!#{merge.iid}.)")
filter/references/merge_request_reference_filter_spec.rb:      act = "Merge #{invalidate_reference(reference)}"
filter/references/merge_request_reference_filter_spec.rb:      urls.project_merge_request_url(mr.project, mr) + "/diffs?commit_id=#{mr.diff_head_sha}"
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.text).to eq("See #{mr.to_reference(full: true)} (#{commit.short_id})")
filter/references/merge_request_reference_filter_spec.rb:        urls.project_merge_request_url(mr.project, mr) + "/diffs?commit_id=12345678"
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{invalidate_commit_reference}")
filter/references/merge_request_reference_filter_spec.rb:      expect(doc.text).to eq("See #{mr.to_reference(full: true)} (diffs)")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("See #{reference}")
filter/references/merge_request_reference_filter_spec.rb:      doc = reference_filter("Merge (#{reference}.)")
filter/references/merge_request_reference_filter_spec.rb:      reference = "#{project.full_path}!#{merge.iid}"
filter/references/merge_request_reference_filter_spec.rb:      result = reference_filter("See #{reference}", { project: nil, group: create(:group) })
filter/references/merge_request_reference_filter_spec.rb:      single_reference = "Merge request #{merge_request1.to_reference}"
filter/references/merge_request_reference_filter_spec.rb:      multiple_references = "Merge requests #{merge_request1.to_reference} and #{merge_request2.to_reference}"
filter/minimum_markdown_sanitization_filter_spec.rb:    act = list.map { |tag| "<#{tag}>#{tag}</#{tag}>" }.join(' ')
filter/minimum_markdown_sanitization_filter_spec.rb:    act = %q(<a href="http://example.com/bar.html" onclick="bar">Text</a>)
filter/minimum_markdown_sanitization_filter_spec.rb:    exp = %q(<a href="http://example.com/bar.html">Text</a>)
filter/minimum_markdown_sanitization_filter_spec.rb:    act = list.map { |tag| "<#{tag}>#{tag}</#{tag}>" }.join(' ')
filter/minimum_markdown_sanitization_filter_spec.rb:    act = %q(<strong class="foo">Strong</strong>)
filter/minimum_markdown_sanitization_filter_spec.rb:    act = %q(<em>Emphasis</em> <a href="http://foo" id="bar">foo bar</a>)
filter/minimum_markdown_sanitization_filter_spec.rb:    exp = %q(<em>Emphasis</em> <a href="http://foo">foo bar</a>)
filter/minimum_markdown_sanitization_filter_spec.rb:    act = %q(<a href="http://foo">http</a> <a href="https://foo">https</a> <a href="mailto://foo">mailto</a>)
filter/minimum_markdown_sanitization_filter_spec.rb:    exp = %q(<a href="http://foo">http</a> <a href="https://foo">https</a> <a>mailto</a>)
filter/table_of_contents_legacy_filter_spec.rb:    "<h#{level}>#{text}</h#{level}>\n"
filter/table_of_contents_legacy_filter_spec.rb:    it "processes h#{i} elements" do
filter/table_of_contents_legacy_filter_spec.rb:      html = header(i, "Header #{i}")
filter/table_of_contents_legacy_filter_spec.rb:      expect(doc.css("h#{i} a").first.attr('id')).to eq "user-content-header-#{i}"
filter/table_of_contents_legacy_filter_spec.rb:        doc = filter(header(1, "This, header! is, filled. with @ punctuation?"), context)
filter/table_of_contents_legacy_filter_spec.rb:        doc = filter(header(1, " \r\n\tTitle with spaces\r\n\t "), context)
filter/table_of_contents_legacy_filter_spec.rb:        doc = filter(header(1, "123") + header(2, "1.0"), context)
filter/table_of_contents_legacy_filter_spec.rb:        expect(doc.css('h1 a').first.attr('href')).to eq "##{CGI.escape('한글')}"
filter/table_of_contents_legacy_filter_spec.rb:        expect(doc.css('h1 a').first.attr('href')).to eq "##{'a' * 255}"
filter/table_of_contents_legacy_filter_spec.rb:      let(:content) { '&lt;img src="x" onerror="alert(42)"&gt;' }
filter/task_list_filter_spec.rb:    doc = filter("<ul data-sourcepos=\"1:1-2:20\">\n<li data-sourcepos=\"1:1-1:20\">[ ] testing item 1</li>\n<li data-sourcepos=\"2:1-2:20\">[x] testing item 2</li>\n</ul>")
filter/task_list_filter_spec.rb:        <ul data-sourcepos="1:1-3:11">
filter/task_list_filter_spec.rb:          <li data-sourcepos="1:1-3:11">one
filter/task_list_filter_spec.rb:            <ul data-sourcepos="2:3-3:11">
filter/task_list_filter_spec.rb:              <li data-sourcepos="2:3-3:11">foo
filter/task_list_filter_spec.rb:      it "behaves correctly for `#{html}`" do
filter/task_list_filter_spec.rb:        doc = filter("<ul><li>#{html}</li></ul>")
filter/task_list_filter_spec.rb:      it "does nothing for `#{html}`" do
filter/task_list_filter_spec.rb:        doc = filter("<ul><li>#{html}</li></ul>")
filter/task_list_filter_spec.rb:      doc = filter("<ul><li>#{html}</li></ul>")
filter/gollum_tags_filter_spec.rb:        doc = filter("See #{tag}", context)
filter/gollum_tags_filter_spec.rb:        doc = filter("See #{tag}", context)
filter/gollum_tags_filter_spec.rb:      expect(doc.to_html).to eq 'This is <a href="link" data-wikilink="true">a link</a>'
filter/gollum_tags_filter_spec.rb:        expect(doc.to_html).to eq 'This is <a href="&lt;script&gt;alert(0)&lt;/script&gt;" data-wikilink="true">a link</a>'
filter/gollum_tags_filter_spec.rb:        expect(doc.to_html).to eq 'This is <a href="link" data-wikilink="true">&lt;script&gt;alert(0)&lt;/script&gt;</a>'
filter/gollum_tags_filter_spec.rb:        expect(doc.to_html).to eq 'This is &lt;script&gt;alert(0)&lt;/script&gt; <a href="link" data-wikilink="true">a link</a>'
filter/gollum_tags_filter_spec.rb:      tag = '[[a|http:\'"injected=attribute&gt;&lt;img/src="0"onerror="alert(0)"&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/1]]'
filter/gollum_tags_filter_spec.rb:      doc = filter("See #{tag}", context)
filter/gollum_tags_filter_spec.rb:      expect(doc.at_css('a').to_html).to eq '<a href="http:\'%22injected=attribute&gt;&lt;img/src=%220%22onerror=%22alert(0)%22&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/1" data-wikilink="true">a</a>'
filter/gollum_tags_filter_spec.rb:      tag = '<i>[[a|\'"&gt;&lt;svg&gt;&lt;i/class=gl-show-field-errors&gt;&lt;input/title="&lt;script&gt;alert(0)&lt;/script&gt;"/&gt;&lt;/svg&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/1]]'
filter/gollum_tags_filter_spec.rb:      doc = filter("See #{tag}", context)
filter/gollum_tags_filter_spec.rb:      expect(doc.at_css('i a').to_html).to eq "<a href=\"'%22&gt;&lt;svg&gt;&lt;i/class=gl-show-field-errors&gt;&lt;input/title=%22&lt;script&gt;alert(0)&lt;/script&gt;%22/&gt;&lt;/svg&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/1\" data-wikilink=\"true\">a</a>"
filter/gollum_tags_filter_spec.rb:      text = "]#{'[[a' * 200000}[]"
filter/gollum_tags_filter_spec.rb:      doc = filter("See #{tag}", context)
filter/normalize_source_filter_spec.rb:    content = "\xEF\xBB\xBF---"
filter/normalize_source_filter_spec.rb:    expect(output).to match "---\n\xEF\xBB\xBF---\n"
filter/audio_link_filter_spec.rb:    %(<img src="#{path}"/>)
filter/audio_link_filter_spec.rb:        let(:src) { "/path/audio.#{ext}" }
filter/audio_link_filter_spec.rb:        let(:src) { "/path/audio.#{ext.upcase}" }
filter/audio_link_filter_spec.rb:    let(:image) { %(<img src="#{src}" data-canonical-src=""/>) }
filter/audio_link_filter_spec.rb:      image = %(<img src="#{proxy_src}" data-canonical-src="#{canonical_src}"/>)
filter/front_matter_filter_spec.rb:      expect(output).to include "```yaml:frontmatter\nfoo: :foo_symbol\n"
filter/front_matter_filter_spec.rb:      expect(output).to include "```toml:frontmatter\nfoo = :foo_symbol\n"
filter/front_matter_filter_spec.rb:        "foo": ":foo_symbol",
filter/front_matter_filter_spec.rb:        "bar": ":bar_symbol"
filter/front_matter_filter_spec.rb:      expect(output).to include "```json:frontmatter\n{\n  \"foo\": \":foo_symbol\",\n"
filter/front_matter_filter_spec.rb:      expect(output).to include "```arbitrary:frontmatter\nfoo = :foo_symbol\n"
filter/front_matter_filter_spec.rb:      content = "coding:" + (" " * 50_000) + ";"
filter/front_matter_filter_spec.rb:      content = "coding:\n" + ";;;" + ("\n" * 10_000) + "x"
filter/front_matter_filter_spec.rb:      content = ("coding:" * 120_000) + ("\n" * 80_000) + ";"
filter/front_matter_filter_spec.rb:    let(:ends_with) { "```\n\n---\nfubar: :fubar_symbol\n---\n" }
filter/broadcast_message_placeholders_filter_spec.rb:    let_it_be(:user) { create(:user, email: "helloworld@example.com", name: "GitLab Tanunki :)") }
filter/broadcast_message_placeholders_filter_spec.rb:      it { expect(subject).to eq("Email: #{user.email}") }
filter/broadcast_message_placeholders_filter_spec.rb:      let(:text) { '<a href="http://example.com?email={{email}}"">link</a>' }
filter/broadcast_message_placeholders_filter_spec.rb:      it { expect(subject).to eq("<a href=\"http://example.com?email=helloworld%40example.com\">link</a>") }
filter/broadcast_message_placeholders_filter_spec.rb:      let(:text) { '<a href="http://example.com?name=%7B%7Bname%7D%7D">link</a>' }
filter/broadcast_message_placeholders_filter_spec.rb:      it { expect(subject).to eq("<a href=\"http://example.com?name=GitLab+Tanunki+%3A%29\">link</a>") }
filter/broadcast_message_placeholders_filter_spec.rb:      let(:text) { " " }
filter/broadcast_message_placeholders_filter_spec.rb:      it { expect(subject).to eq(" ") }
filter/broadcast_message_placeholders_filter_spec.rb:      let(:text) { "{{email}} {{name}}" }
filter/broadcast_message_placeholders_filter_spec.rb:      it { expect(subject).to eq("#{user.email} #{user.name}") }
filter/broadcast_message_placeholders_filter_spec.rb:        let(:text) { "{{email}}" }
filter/broadcast_message_placeholders_filter_spec.rb:        let(:text) { "{{name}}" }
filter/broadcast_message_placeholders_filter_spec.rb:        let(:text) { "{{user_id}}" }
filter/broadcast_message_placeholders_filter_spec.rb:        let(:text) { "{{username}}" }
filter/broadcast_message_placeholders_filter_spec.rb:        let(:text) { "{{instance_id}}" }
filter/broadcast_message_placeholders_filter_spec.rb:      let(:text) { "Email: {{email}}" }
filter/broadcast_message_placeholders_filter_spec.rb:      it { expect(subject).to eq("Email: ") }
filter/plantuml_filter_spec.rb:    stub_application_setting(plantuml_enabled: true, plantuml_url: "http://localhost:8080")
filter/plantuml_filter_spec.rb:    input = %(<pre data-canonical-lang="plantuml"><code>Bob -&gt; Sara : Hello\n</code></pre>)
filter/plantuml_filter_spec.rb:    output = '<img class="plantuml" src="http://localhost:8080/png/U9npoazIqBLJ24uiIbImKl18pSd91m0rkGMq" data-diagram="plantuml" data-diagram-src="data:text/plain;base64,Qm9iIC0+IFNhcmEgOiBIZWxsbw==">'
filter/plantuml_filter_spec.rb:    stub_application_setting(plantuml_enabled: true, plantuml_url: "http://localhost:8080")
filter/plantuml_filter_spec.rb:    input = %(<pre><code data-canonical-lang="plantuml">Bob -&gt; Sara : Hello\n</code></pre>)
filter/plantuml_filter_spec.rb:    output = '<img class="plantuml" src="http://localhost:8080/png/U9npoazIqBLJ24uiIbImKl18pSd91m0rkGMq" data-diagram="plantuml" data-diagram-src="data:text/plain;base64,Qm9iIC0+IFNhcmEgOiBIZWxsbw==">'
filter/plantuml_filter_spec.rb:    input = %(<pre data-canonical-lang="plantuml"><code>Bob -&gt; Sara : Hello\n</code></pre>)
filter/plantuml_filter_spec.rb:    stub_application_setting(plantuml_enabled: true, plantuml_url: "invalid")
filter/plantuml_filter_spec.rb:    input = %(<pre data-canonical-lang="plantuml"><code>Bob -&gt; Sara : Hello\n</code></pre>)
filter/plantuml_filter_spec.rb:  it "strips at most one trailing newline from the diagram's source" do
filter/plantuml_filter_spec.rb:    stub_application_setting(plantuml_enabled: true, plantuml_url: "http://localhost:8080")
filter/plantuml_filter_spec.rb:    input = %(<pre data-canonical-lang="plantuml"><code>Bob -&gt; Sara : Hello\n' Next line left intentionally blank.\n\n</code></pre>)
filter/plantuml_filter_spec.rb:    output = '<img class="plantuml" src="http://localhost:8080/png/U9npoazIqBLJ24uiIbImKl18pSd9vr9Ny4kjA578oSnBLSX9JIjHoCmhISqhoSpFIyp9gLH8oadCozRZ0W0Q7XD1" data-diagram="plantuml" data-diagram-src="data:text/plain;base64,Qm9iIC0+IFNhcmEgOiBIZWxsbwonIE5leHQgbGluZSBsZWZ0IGludGVudGlvbmFsbHkgYmxhbmsuCg==">'
filter/ascii_doc_post_processing_filter_spec.rb:  it "adds class for elements with data-math-style" do
filter/ascii_doc_post_processing_filter_spec.rb:    result = filter('<pre data-math-style="inline">some code</pre><div data-math>and</div>').to_html
filter/ascii_doc_post_processing_filter_spec.rb:    expect(result).to eq('<pre data-math-style="inline" class="js-render-math">some code</pre><div data-math>and</div>')
filter/ascii_doc_post_processing_filter_spec.rb:  it "adds class for elements with data-mermaid-style" do
filter/ascii_doc_post_processing_filter_spec.rb:    result = filter('<pre data-mermaid-style="display">some code</pre>').to_html
filter/ascii_doc_post_processing_filter_spec.rb:    expect(result).to eq('<pre data-mermaid-style="display" class="js-render-mermaid">some code</pre>')
filter/ascii_doc_post_processing_filter_spec.rb:  it "keeps content when no data-math-style found" do
filter/commit_trailers_filter_spec.rb:  let(:trailer)             { "#{generate(:short_text)}-by:" }
filter/commit_trailers_filter_spec.rb:        ["#{FFaker::Lorem.word}-by:", "#{FFaker::Lorem.word}-BY:", "#{FFaker::Lorem.word}-By:"]
filter/commit_trailers_filter_spec.rb:      message_html = commit_html("\n\r  #{commit_message}")
filter/commit_trailers_filter_spec.rb:      different_trailer = "#{generate(:short_text)}-by:"
filter/commit_trailers_filter_spec.rb:  context "ignores" do
filter/commit_trailers_filter_spec.rb:      exp = message = commit_html(Array.new(5) { FFaker::Lorem.sentence }.join("\n"))
filter/commit_trailers_filter_spec.rb:      exp = message = commit_html(Array.new(5) { 'Merged-By:' }.join("\n"))
filter/commit_trailers_filter_spec.rb:  context "structure" do
filter/commit_trailers_filter_spec.rb:      expect(doc.xpath('pre').text).to start_with("\n\n")
filter/commit_trailers_filter_spec.rb:      # See: "build_relative_path" in "lib/banzai/filter/relative_link_filter.rb"
filter/commit_trailers_filter_spec.rb:        expected = "#{Gitlab.config.gitlab.url}#{user_with_avatar.avatar_url}"
filter/syntax_highlight_filter_spec.rb:  shared_examples "XSS prevention" do |lang|
filter/syntax_highlight_filter_spec.rb:    it "escapes HTML tags" do
filter/syntax_highlight_filter_spec.rb:      result = filter(%{<pre data-canonical-lang="#{lang}"><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></pre>})
filter/syntax_highlight_filter_spec.rb:  context "when no language is specified" do
filter/syntax_highlight_filter_spec.rb:    it "highlights as plaintext" do
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre class="code highlight js-syntax-highlight language-plaintext" v-pre="true"><code><span id="LC1" class="line" lang="plaintext">def fun end</span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:    include_examples "XSS prevention", ""
filter/syntax_highlight_filter_spec.rb:  context "when contains mermaid diagrams" do
filter/syntax_highlight_filter_spec.rb:    it "ignores mermaid blocks" do
filter/syntax_highlight_filter_spec.rb:      result = filter('<pre data-mermaid-style="display" data-canonical-lang="mermaid"><code class="js-render-mermaid">mermaid code</code></pre>')
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre data-mermaid-style="display" data-canonical-lang="mermaid" class="code highlight js-syntax-highlight language-mermaid" v-pre="true"><code class="js-render-mermaid"><span id="LC1" class="line" lang="mermaid">mermaid code</span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:  context "when <pre> contains multiple <code> tags" do
filter/syntax_highlight_filter_spec.rb:    it "ignores the block" do
filter/syntax_highlight_filter_spec.rb:  context "when <pre><code> is a child of <pre><code> which is a child of a div " do
filter/syntax_highlight_filter_spec.rb:    it "captures all text and doesn't fail trying to replace a node with no parent" do
filter/syntax_highlight_filter_spec.rb:      text = "<div>\n<pre><code>\nsomething\n<pre><code>else\n</code></pre></code></pre>\n</div>"
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div><div class="gl-relative markdown-code-block js-markdown-code"><pre class="code highlight js-syntax-highlight language-plaintext" v-pre="true"><code><span id="LC1" class="line" lang="plaintext"></span><span id="LC2" class="line" lang="plaintext">something</span><span id="LC3" class="line" lang="plaintext">else</span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div></div>')
filter/syntax_highlight_filter_spec.rb:  context "when a valid language is specified" do
filter/syntax_highlight_filter_spec.rb:    it "highlights as that language" do
filter/syntax_highlight_filter_spec.rb:      result = filter('<pre data-canonical-lang="ruby"><code>def fun end</code></pre>')
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre data-canonical-lang="ruby" class="code highlight js-syntax-highlight language-ruby" v-pre="true"><code><span id="LC1" class="line" lang="ruby"><span class="k">def</span> <span class="nf">fun</span> <span class="k">end</span></span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:    include_examples "XSS prevention", "ruby"
filter/syntax_highlight_filter_spec.rb:  context "when an invalid language is specified" do
filter/syntax_highlight_filter_spec.rb:    it "highlights as plaintext" do
filter/syntax_highlight_filter_spec.rb:      result = filter('<pre data-canonical-lang="gnuplot"><code>This is a test</code></pre>')
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre data-canonical-lang="gnuplot" class="code highlight js-syntax-highlight language-plaintext" v-pre="true"><code><span id="LC1" class="line" lang="plaintext">This is a test</span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:    include_examples "XSS prevention", "gnuplot"
filter/syntax_highlight_filter_spec.rb:  context "languages that should be passed through" do
filter/syntax_highlight_filter_spec.rb:      context "when #{lang} is specified" do
filter/syntax_highlight_filter_spec.rb:        it "highlights as plaintext but with the correct language attribute and class" do
filter/syntax_highlight_filter_spec.rb:          result = filter(%(<pre data-canonical-lang="#{lang}"><code>This is a test</code></pre>))
filter/syntax_highlight_filter_spec.rb:          expect(result.to_html.delete("\n")).to eq(%(<div class="gl-relative markdown-code-block js-markdown-code"><pre data-canonical-lang="#{lang}" class="code highlight js-syntax-highlight language-#{lang}" v-pre="true"><code><span id="LC1" class="line" lang="#{lang}">This is a test</span></code></pre>#{copy_code_btn}#{insert_code_snippet_btn}</div>))
filter/syntax_highlight_filter_spec.rb:        include_examples "XSS prevention", lang
filter/syntax_highlight_filter_spec.rb:  context "when sourcepos metadata is available" do
filter/syntax_highlight_filter_spec.rb:    it "includes it in the highlighted code block" do
filter/syntax_highlight_filter_spec.rb:      result = filter('<pre data-sourcepos="1:1-3:3" data-canonical-lang="plaintext"><code>This is a test</code></pre>')
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre data-sourcepos="1:1-3:3" data-canonical-lang="plaintext" class="code highlight js-syntax-highlight language-plaintext" v-pre="true"><code><span id="LC1" class="line" lang="plaintext">This is a test</span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:    it "escape sourcepos metadata to prevent XSS" do
filter/syntax_highlight_filter_spec.rb:      result = filter('<pre data-sourcepos="&#34;%22 href=&#34;x&#34;></pre><base href=http://unsafe-website.com/><pre x=&#34;"><code></code></pre>')
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre data-sourcepos=\'"%22 href="x"&gt;&lt;/pre&gt;&lt;base href=http://unsafe-website.com/&gt;&lt;pre x="\' class="code highlight js-syntax-highlight language-plaintext" v-pre="true"><code></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:  context "when Rouge lexing fails" do
filter/syntax_highlight_filter_spec.rb:    it "highlights as plaintext" do
filter/syntax_highlight_filter_spec.rb:      result = filter('<pre data-canonical-lang="ruby"><code>This is a test</code></pre>')
filter/syntax_highlight_filter_spec.rb:      expect(result.to_html.delete("\n")).to eq('<div class="gl-relative markdown-code-block js-markdown-code"><pre data-canonical-lang="ruby" class="code highlight js-syntax-highlight" v-pre="true"><code><span id="LC1" class="line" lang="">This is a test</span></code></pre><copy-code></copy-code><insert-code-snippet></insert-code-snippet></div>')
filter/syntax_highlight_filter_spec.rb:    include_examples "XSS prevention", "ruby"
filter/syntax_highlight_filter_spec.rb:  context "when Rouge lexing fails after a retry" do
filter/syntax_highlight_filter_spec.rb:    it "does not add highlighting classes" do
filter/syntax_highlight_filter_spec.rb:    include_examples "XSS prevention", "ruby"
filter/syntax_highlight_filter_spec.rb:    let(:text) { '<pre data-canonical-lang="ruby"><code>def fun end</code></pre>' }
filter/broadcast_message_sanitization_filter_spec.rb:      let(:exp) { %q(<a href="/">Link</a>) }
filter/broadcast_message_sanitization_filter_spec.rb:        let(:exp) { %(<a href="#" style="#{allowed_style}">Stylish Link</a>) }
filter/broadcast_message_sanitization_filter_spec.rb:        doc = filter(%(<a href="#" style="#{style}">Stylish Link</a>))
filter/broadcast_message_sanitization_filter_spec.rb:      let(:exp) { %q(<a href="#" class="btn">Button Link</a>) }
filter/jira_import/adf_to_commonmark_filter_spec.rb:    expect(filter(source)).to eq "Invalid Atlassian Document Format JSON\n\n#{source}"
filter/jira_import/adf_to_commonmark_filter_spec.rb:    expect(filter(source)).to eq "Invalid Atlassian Document Format JSON\n\n#{source}"
filter/inline_diff_filter_spec.rb:    doc = "START [-something deleted-] END"
filter/inline_diff_filter_spec.rb:    expect(filter(doc).to_html).to eq('START <span class="idiff left right deletion">something deleted</span> END')
filter/inline_diff_filter_spec.rb:    doc = "START {-something deleted-} END"
filter/inline_diff_filter_spec.rb:    expect(filter(doc).to_html).to eq('START <span class="idiff left right deletion">something deleted</span> END')
filter/inline_diff_filter_spec.rb:    doc = "START [- END"
filter/inline_diff_filter_spec.rb:    doc = "START [+something added+] END"
filter/inline_diff_filter_spec.rb:    expect(filter(doc).to_html).to eq('START <span class="idiff left right addition">something added</span> END')
filter/inline_diff_filter_spec.rb:    doc = "START {+something added+} END"
filter/inline_diff_filter_spec.rb:    expect(filter(doc).to_html).to eq('START <span class="idiff left right addition">something added</span> END')
filter/inline_diff_filter_spec.rb:    doc = "START {+ END"
filter/inline_diff_filter_spec.rb:      "{+ additions +]",
filter/inline_diff_filter_spec.rb:      "[+ additions +}",
filter/inline_diff_filter_spec.rb:      "{- delletions -]",
filter/inline_diff_filter_spec.rb:      "[- delletions -}"
filter/inline_diff_filter_spec.rb:    doc = "START {+&lt;script&gt;alert('I steal cookies')&lt;/script&gt;+} END"
filter/inline_diff_filter_spec.rb:    expect(filter(doc).to_html).to eq("START <span class=\"idiff left right addition\">&lt;script&gt;alert('I steal cookies')&lt;/script&gt;</span> END")
filter/inline_diff_filter_spec.rb:    doc = "<pre>START {+something added+} END</pre>"
filter/inline_diff_filter_spec.rb:    doc = "<code>START {+something added+} END</code>"
filter/inline_diff_filter_spec.rb:    doc = "<tt>START {+something added+} END</tt>"
filter/asset_proxy_filter_spec.rb:    %(<img src="#{path}" />)
filter/asset_proxy_filter_spec.rb:      nil | "test.png"
filter/asset_proxy_filter_spec.rb:      nil | "/test.png"
filter/asset_proxy_filter_spec.rb:      nil | "#{Gitlab.config.gitlab.url}/test.png"
filter/footnote_filter_spec.rb:      <p>first<sup><a href="#fn-1" id="fnref-1" data-footnote-ref>1</a></sup> and second<sup><a href="#fn-second" id="fnref-second" data-footnote-ref>2</a></sup> and third<sup><a href="#fn-_%F0%9F%98%84_" id="fnref-_%F0%9F%98%84_" data-footnote-ref>3</a></sup></p>
filter/footnote_filter_spec.rb:      <p>missing id<sup><a href="#fn-10" data-footnote-ref>1</a></sup></p>
filter/footnote_filter_spec.rb:      <li id="fn-1">
filter/footnote_filter_spec.rb:      <p>one <a href="#fnref-1" data-footnote-backref data-footnote-backref-idx="1" aria-label="Back to reference 1" title="Back to reference 1">↩</a></p>
filter/footnote_filter_spec.rb:      <li id="fn-second">
filter/footnote_filter_spec.rb:      <p>two <a href="#fnref-second" data-footnote-backref data-footnote-backref-idx="2" aria-label="Back to reference 2" title="Back to reference 2">↩</a></p>
filter/footnote_filter_spec.rb:      </li>\n<li id="fn-_%F0%9F%98%84_">
filter/footnote_filter_spec.rb:      <p>three <a href="#fnref-_%F0%9F%98%84_" data-footnote-backref data-footnote-backref-idx="3" aria-label="Back to reference 3" title="Back to reference 3">↩</a></p>
filter/footnote_filter_spec.rb:      <p>first<sup class="footnote-ref"><a href="#fn-1-#{identifier}" id="fnref-1-#{identifier}" data-footnote-ref>1</a></sup> and second<sup class="footnote-ref"><a href="#fn-second-#{identifier}" id="fnref-second-#{identifier}" data-footnote-ref>2</a></sup> and third<sup class="footnote-ref"><a href="#fn-_%F0%9F%98%84_-#{identifier}" id="fnref-_%F0%9F%98%84_-#{identifier}" data-footnote-ref>3</a></sup></p>
filter/footnote_filter_spec.rb:      <p>missing id<sup><a href="#fn-10" data-footnote-ref>1</a></sup></p>
filter/footnote_filter_spec.rb:      <section data-footnotes class=\"footnotes\">
filter/footnote_filter_spec.rb:      <li id="fn-1-#{identifier}">
filter/footnote_filter_spec.rb:      <p>one <a href="#fnref-1-#{identifier}" data-footnote-backref data-footnote-backref-idx="1" aria-label="Back to reference 1" title="Back to reference 1" class="footnote-backref">↩</a></p>
filter/footnote_filter_spec.rb:      <li id="fn-second-#{identifier}">
filter/footnote_filter_spec.rb:      <p>two <a href="#fnref-second-#{identifier}" data-footnote-backref data-footnote-backref-idx="2" aria-label="Back to reference 2" title="Back to reference 2" class="footnote-backref">↩</a></p>
filter/footnote_filter_spec.rb:      <li id="fn-_%F0%9F%98%84_-#{identifier}">
filter/footnote_filter_spec.rb:      <p>three <a href="#fnref-_%F0%9F%98%84_-#{identifier}" data-footnote-backref data-footnote-backref-idx="3" aria-label="Back to reference 3" title="Back to reference 3" class="footnote-backref">↩</a></p>
filter/footnote_filter_spec.rb:      true   | "1. one[^1]\n[^1]: AbC"
filter/footnote_filter_spec.rb:      true   | "1. one[^abc]\n[^abc]: AbC"
filter/footnote_filter_spec.rb:      false  | "1. one[^1]\n[^abc]: AbC"
filter/footnote_filter_spec.rb:      markdown = "[^1]\n[^1]:\n" * (Banzai::Filter::FootnoteFilter::FOOTNOTE_LIMIT + 1)
filter/json_table_filter_spec.rb:      <pre data-canonical-lang="json" data-lang-params="table another_param">
filter/json_table_filter_spec.rb:        "fields": [
filter/json_table_filter_spec.rb:            "key": "starts_at",
filter/json_table_filter_spec.rb:            "label": "Date < & >",
filter/json_table_filter_spec.rb:            "sortable": true
filter/json_table_filter_spec.rb:            "key": "url",
filter/json_table_filter_spec.rb:            "label": "URL"
filter/json_table_filter_spec.rb:        "items": [
filter/json_table_filter_spec.rb:            "starts_at": "_2024-10-07_"
filter/json_table_filter_spec.rb:            "url": "https://example.com/page2.html"
filter/json_table_filter_spec.rb:        "filter": true,
filter/json_table_filter_spec.rb:        "caption": "Markdown enabled table",
filter/json_table_filter_spec.rb:        "markdown": true
filter/json_table_filter_spec.rb:      <div><table data-table-fields='[{"key":"starts_at","label":"Date \\u003c \\u0026 \\u003e","sortable":true},{"key":"url","label":"URL"}]' data-table-filter="true" data-table-markdown="true">
filter/json_table_filter_spec.rb:      <td><a href="https://example.com/page2.html">https://example.com/page2.html</a></td>
filter/json_table_filter_spec.rb:      <pre data-canonical-lang="json" data-lang-params="table">
filter/json_table_filter_spec.rb:        "items": [
filter/json_table_filter_spec.rb:            "starts_at": "_2024-10-07_",
filter/json_table_filter_spec.rb:            "url": "https://example.com/page2.html"
filter/json_table_filter_spec.rb:        "markdown": true
filter/json_table_filter_spec.rb:      <div><table data-table-fields='[{"key":"starts_at"},{"key":"url"}]' data-table-markdown="true">
filter/json_table_filter_spec.rb:      <td><a href="https://example.com/page2.html">https://example.com/page2.html</a></td>
filter/json_table_filter_spec.rb:      <pre data-canonical-lang="json" data-lang-params="table">
filter/json_table_filter_spec.rb:        "items": [
filter/json_table_filter_spec.rb:            "starts_at": "_2024-10-07_",
filter/json_table_filter_spec.rb:            "url": "https://example.com/page2.html"
filter/json_table_filter_spec.rb:      <pre data-canonical-lang="json" data-lang-params="table">
filter/json_table_filter_spec.rb:            "starts_at": "_2024-10-07_",
filter/json_table_filter_spec.rb:            "url": "https://example.com/page2.html"
filter/json_table_filter_spec.rb:        "markdown": true
filter/wiki_link_filter_spec.rb:  let(:namespace) { build_stubbed(:namespace, name: "wiki_link_ns") }
filter/wiki_link_filter_spec.rb:  let(:project)   { build_stubbed(:project, :public, name: "wiki_link_project", namespace: namespace) }
filter/wiki_link_filter_spec.rb:  it "doesn't rewrite absolute links" do
filter/wiki_link_filter_spec.rb:    filtered_link = filter("<a href='http://example.com:8000/'>Link</a>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:  it "doesn't rewrite links to project uploads" do
filter/wiki_link_filter_spec.rb:    filtered_link = filter("<a href='/uploads/a.test'>Link</a>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:    it "stores original url in the data-canonical-src attribute" do
filter/wiki_link_filter_spec.rb:      original_path = "#{repository_upload_folder}/a.jpg"
filter/wiki_link_filter_spec.rb:      filtered_elements = filter("<a href='#{original_path}'><img src='#{original_path}'>example</img></a>", wiki: wiki)
filter/wiki_link_filter_spec.rb:    it "does not store original url in the data-canonical-src attribute" do
filter/wiki_link_filter_spec.rb:      filtered_link = filter("<a href='/uploads/a.test'>Link</a>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:      path = "#{wiki.wiki_base_path}/#{repository_upload_folder}/a.jpg"
filter/wiki_link_filter_spec.rb:      filtered_link = filter("<a href='#{path}'>Link</a>", wiki: wiki, page_slug: 'home').children[0]
filter/wiki_link_filter_spec.rb:      path = "#{old_wiki_base_path}/#{repository_upload_folder}/a.jpg"
filter/wiki_link_filter_spec.rb:      filtered_link = filter("<a href='#{path}'>Link</a>", wiki: wiki, page_slug: 'home').children[0]
filter/wiki_link_filter_spec.rb:  describe "when links point to the #{Wikis::CreateAttachmentService::ATTACHMENT_PATH} folder" do
filter/wiki_link_filter_spec.rb:    context 'with an "a" html tag' do
filter/wiki_link_filter_spec.rb:        filtered_link = filter("<a href='#{repository_upload_folder}/a.test'>Link</a>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:        expect(filtered_link.attribute('href').value).to eq("#{wiki.wiki_base_path}/#{repository_upload_folder}/a.test")
filter/wiki_link_filter_spec.rb:    context 'with "img" html tag' do
filter/wiki_link_filter_spec.rb:      let(:path) { "#{wiki.wiki_base_path}/#{repository_upload_folder}/a.jpg" }
filter/wiki_link_filter_spec.rb:      context 'inside an "a" html tag' do
filter/wiki_link_filter_spec.rb:          filtered_elements = filter("<a href='#{repository_upload_folder}/a.jpg'><img src='#{repository_upload_folder}/a.jpg'>example</img></a>", wiki: wiki)
filter/wiki_link_filter_spec.rb:      context 'outside an "a" html tag' do
filter/wiki_link_filter_spec.rb:          filtered_link = filter("<img src='#{repository_upload_folder}/a.jpg'>example</img>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:    context 'with "video" html tag' do
filter/wiki_link_filter_spec.rb:        filtered_link = filter("<video src='#{repository_upload_folder}/a.mp4'></video>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:        expect(filtered_link.attribute('src').value).to eq("#{wiki.wiki_base_path}/#{repository_upload_folder}/a.mp4")
filter/wiki_link_filter_spec.rb:    context 'with "audio" html tag' do
filter/wiki_link_filter_spec.rb:        filtered_link = filter("<audio src='#{repository_upload_folder}/a.wav'></audio>", wiki: wiki).children[0]
filter/wiki_link_filter_spec.rb:        expect(filtered_link.attribute('src').value).to eq("#{wiki.wiki_base_path}/#{repository_upload_folder}/a.wav")
filter/wiki_link_filter_spec.rb:  describe "invalid links" do
filter/wiki_link_filter_spec.rb:    invalid_links = ["http://:8080", "http://", "http://:8080/path"]
filter/wiki_link_filter_spec.rb:      it "doesn't rewrite invalid invalid_links like #{invalid_link}" do
filter/wiki_link_filter_spec.rb:        filtered_link = filter("<a href='#{invalid_link}'>Link</a>", wiki: wiki).children[0]
filter/markdown_engines/glfm_markdown_spec.rb:      <h1 data-sourcepos="1:1-1:4"><a href="#hi" aria-hidden="true" class="anchor" id="user-content-hi"></a>hi</h1>
filter/markdown_engines/glfm_markdown_spec.rb:      <h1><a href="#hi" aria-hidden="true" class="anchor" id="user-content-hi"></a>hi</h1>
filter/markdown_engines/glfm_markdown_spec.rb:      <p data-sourcepos="1:1-1:6"><code data-sourcepos="1:1-1:6">code</code></p>
filter/markdown_engines/glfm_markdown_spec.rb:      <p><a href="http://example.com">http://example.com</a> <em>emphasis</em> $x + y$</p>
filter/markdown_engines/cmark_spec.rb:    expect(engine.render('# hi')).to eq %(<h1 data-sourcepos="1:1-1:4">hi</h1>\n)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", project: nil)
filter/wiki_link_gollum_filter_spec.rb:      expect(doc.to_html).to eq '<p dir="auto">See <a href="unknown" data-wikilink="true">Something</a></p>'
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:      doc = pipeline_filter("See #{tag}", project: nil, group: group, wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:    expect(doc.to_html).to include "This is <a href=\"#{wiki.wiki_base_path}/link\""
filter/wiki_link_gollum_filter_spec.rb:      expect(doc.at_css('a')['href']).to eq "#{wiki.wiki_base_path}/%3Cscript%3Ealert(0)%3C/script%3E"
filter/wiki_link_gollum_filter_spec.rb:      expect(doc.at_css('a')['href']).to eq "#{wiki.wiki_base_path}/link"
filter/wiki_link_gollum_filter_spec.rb:      # This is <script>alert(0)</script> <a href="/namespace1/project-1/-/wikis/link"
filter/wiki_link_gollum_filter_spec.rb:      # class="gfm gfm-gollum-wiki-page" data-canonical-src="link" data-link="true" data-gollum="true"
filter/wiki_link_gollum_filter_spec.rb:      # data-reference-type="wiki_page" data-project="8">a link</a>
filter/wiki_link_gollum_filter_spec.rb:      expect(doc.to_html).to start_with '<p dir="auto">This is &lt;script&gt;alert(0)&lt;/script&gt; <a href'
filter/wiki_link_gollum_filter_spec.rb:    doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:    tag = '[[a|http:\'"injected=attribute&gt;&lt;img/src="0"onerror="alert(0)"&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/1]]'
filter/wiki_link_gollum_filter_spec.rb:    doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:    tag = '<i>[[a|\'"&gt;&lt;svg&gt;&lt;i/class=gl-show-field-errors&gt;&lt;input/title="&lt;script&gt;alert(0)&lt;/script&gt;"/&gt;&lt;/svg&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/1]]'
filter/wiki_link_gollum_filter_spec.rb:    doc = pipeline_filter("See #{tag}", wiki: wiki)
filter/wiki_link_gollum_filter_spec.rb:    expect(doc.at_css('i a')['href']).to eq "#{wiki.wiki_base_path}/'%22%3E%3Csvg%3E%3Ci/class=gl-show-field-errors%3E%3Cinput/title=%22%3Cscript%3Ealert(0)%3C/script%3E%22/%3E%3C/svg%3Ehttps://gitlab.com/gitlab-org/gitlab/-/issues/1"
filter/wiki_link_gollum_filter_spec.rb:    expect(doc.at_css('i a')['data-canonical-src']).to eq "'%22%3E%3Csvg%3E%3Ci/class=gl-show-field-errors%3E%3Cinput/title=%22%3Cscript%3Ealert(0)%3C/script%3E%22/%3E%3C/svg%3Ehttps://gitlab.com/gitlab-org/gitlab/-/issues/1"
filter/wiki_link_gollum_filter_spec.rb:      '<a href="http://example.com" data-wikilink="true" rel="nofollow noreferrer noopener" target="_blank">http://example.com</a></p>'
filter/include_filter_spec.rb:  let_it_be(:wiki_data) { "---\ntitle: Foo\n---\nincluded text" }
filter/include_filter_spec.rb:          .to eq "**Error including '[missing.md](missing.md)' : not found**\n"
filter/include_filter_spec.rb:      text = "#{text_include}\n" * (max_includes + 1)
filter/include_filter_spec.rb:      expect(result).to start_with("#{file_data}\n" * max_includes)
filter/include_filter_spec.rb:            .to eq "**Error including '[http://example.com](http://example.com)' : not readable**\n"
filter/include_filter_spec.rb:            .to eq "**Error including '[http://example.com/foo bar](http://example.com/foo bar)' : not found**\n"
filter/include_filter_spec.rb:        text = "#{http_include}\n" * (max_includes + 1)
filter/include_filter_spec.rb:        expect(result).to start_with("something\n" * max_includes)
filter/include_filter_spec.rb:      text = "#{text_include}\n" * max_includes
filter/suggestion_filter_spec.rb:  let(:input) { %(<pre class="code highlight js-syntax-highlight language-suggestion"><code>foo\n</code></pre>) }
filter/suggestion_filter_spec.rb:    let(:input) { %(<pre class="code highlight js-syntax-highlight language-suggestion" #{data_attr}="-3+2"><code>foo\n</code></pre>) }
filter/truncate_source_filter_spec.rb:    stub_const("#{described_class}::CHARACTER_COUNT_LIMIT", 50)
filter/truncate_source_filter_spec.rb:    stub_const("#{described_class}::USER_MSG_LIMIT", 20)
filter/truncate_source_filter_spec.rb:      stub_const("#{described_class}::USER_MSG_LIMIT", 200)
filter/quick_action_filter_spec.rb:    described_class.call('<p data-sourcepos="1:1-2:3">/quick</p>', {}, result)
filter/quick_action_filter_spec.rb:    described_class.call('<blockquote data-sourcepos="1:1-1:1">/quick</blockquote>', {}, result)
filter/quick_action_filter_spec.rb:    described_class.call('<li data-sourcepos="1:1-1:1">/quick</li>', {}, result)
filter/quick_action_filter_spec.rb:    described_class.call('<code data-sourcepos="1:1-1:1">/quick</code>', {}, result)
filter/service_desk_upload_link_filter_spec.rb:    %(<a href="#{path}">#{text}</a>)
filter/service_desk_upload_link_filter_spec.rb:  let(:upload_path) { "/uploads/#{secret}/#{file_name}" }
filter/service_desk_upload_link_filter_spec.rb:      let(:contexts) { { uploads_as_attachments: ["#{secret}/#{file_name}"] } }
filter/service_desk_upload_link_filter_spec.rb:          expect(doc.at_css('strong').text).to eq("#{filename_in_text} (#{file_name})")
filter/service_desk_upload_link_filter_spec.rb:      let(:upload_path_1) { "/uploads/#{secret_1}/#{file_name_1}" }
filter/service_desk_upload_link_filter_spec.rb:        let(:contexts) { { uploads_as_attachments: ["#{secret}/#{file_name}", "#{secret_1}/#{file_name_1}"] } }
filter/service_desk_upload_link_filter_spec.rb:          doc = filter("#{html_link} #{html_link_1}", contexts)
filter/service_desk_upload_link_filter_spec.rb:          expect(doc.at_css("strong:contains('#{file_name}')")).not_to be_nil
filter/service_desk_upload_link_filter_spec.rb:          expect(doc.at_css("strong:contains('#{file_name_1}')")).not_to be_nil
filter/service_desk_upload_link_filter_spec.rb:        let(:contexts) { { uploads_as_attachments: ["#{secret}/#{file_name}"] } }
filter/service_desk_upload_link_filter_spec.rb:          doc = filter("#{html_link} #{html_link_1}", contexts)
filter/service_desk_upload_link_filter_spec.rb:          expect(doc.at_css("strong:contains('#{file_name}')")).not_to be_nil
filter/service_desk_upload_link_filter_spec.rb:          expect(doc.at_css("a:contains('#{file_name_1}')")).not_to be_nil
filter/ascii_doc_sanitization_filter_spec.rb:    result = filter('<p>This paragraph has a footnote.<sup>[<a id="_footnoteref_1" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p>').to_html
filter/ascii_doc_sanitization_filter_spec.rb:    expect(result).to eq('<p>This paragraph has a footnote.<sup>[<a id="_footnoteref_1" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p>')
filter/ascii_doc_sanitization_filter_spec.rb:    result = filter('<div id="_footnotedef_1">
filter/ascii_doc_sanitization_filter_spec.rb:<a href="#_footnoteref_1">1</a>. This is the text of the footnote.</div>').to_html
filter/ascii_doc_sanitization_filter_spec.rb:    expect(result).to eq(%(<div id="_footnotedef_1">
filter/ascii_doc_sanitization_filter_spec.rb:<a href="#_footnoteref_1">1</a>. This is the text of the footnote.</div>))
filter/ascii_doc_sanitization_filter_spec.rb:    result = filter('<p><a id="user-content-cross-references"></a>A link to another location within an AsciiDoc document.</p>').to_html
filter/ascii_doc_sanitization_filter_spec.rb:    expect(result).to eq(%(<p><a id="user-content-cross-references"></a>A link to another location within an AsciiDoc document.</p>))
filter/ascii_doc_sanitization_filter_spec.rb:      it "preserves user-content- prefixed ids on div (#{block})" do
filter/ascii_doc_sanitization_filter_spec.rb:          <div id="user-content-#{block}" class="#{block}">
filter/ascii_doc_sanitization_filter_spec.rb:            <div class="content">
filter/ascii_doc_sanitization_filter_spec.rb:              <div class="paragraph">
filter/ascii_doc_sanitization_filter_spec.rb:          <div id="user-content-#{block}" class="#{block}">
filter/ascii_doc_sanitization_filter_spec.rb:    result = filter(%(<h2 id="user-content-first-section">
filter/ascii_doc_sanitization_filter_spec.rb:<a class="anchor" href="#user-content-first-section"></a>First section</h2>)).to_html
filter/ascii_doc_sanitization_filter_spec.rb:    expect(result).to eq(%(<h2 id="user-content-first-section">
filter/ascii_doc_sanitization_filter_spec.rb:<a class="anchor" href="#user-content-first-section"></a>First section</h2>))
filter/ascii_doc_sanitization_filter_spec.rb:    result = filter('<p><a id="cross-references"></a>A link to another location within an AsciiDoc document.</p>').to_html
filter/repository_link_filter_spec.rb:    %(<img src="#{path}" />)
filter/repository_link_filter_spec.rb:    %(<video src="#{path}"></video>)
filter/repository_link_filter_spec.rb:    %(<audio src="#{path}"></audio>)
filter/repository_link_filter_spec.rb:    %(<a href="#{path}">#{path}</a>)
filter/repository_link_filter_spec.rb:    raw_doc = ""
filter/repository_link_filter_spec.rb:        create_file_in_repo(project, ref, ref, "new_file_#{i}", "x")
filter/repository_link_filter_spec.rb:        raw_doc += link("new_file_#{i}")
filter/repository_link_filter_spec.rb:    act = link("://foo")
filter/repository_link_filter_spec.rb:    act = link("%FF")
filter/repository_link_filter_spec.rb:    expect { filter(link("files/test.md"), requested_path: '%FF') }.not_to raise_error
filter/repository_link_filter_spec.rb:    act = link("open(/var/tmp/):%20/location%0Afrom:%20/test")
filter/repository_link_filter_spec.rb:    act = link("/%00")
filter/repository_link_filter_spec.rb:      .to eq "/#{project_path}/-/blob/#{ref}/non/existent.file"
filter/repository_link_filter_spec.rb:      doc = ""
filter/repository_link_filter_spec.rb:          .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:      doc = ""
filter/repository_link_filter_spec.rb:          .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:      path = "#{project_path}/-/merge_requests/1/diffs"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/missing-file"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README.md"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/README.md"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/README.md#section"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/tree/#{ref}/doc/api"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/raw/#{ref}/files/images/logo-black.png"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/raw/#{ref}/files/images/logo-black.png"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/raw/video/files/videos/intro.mp4"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/raw/audio/files/audio/sample.wav"
filter/repository_link_filter_spec.rb:      expect(doc.at_css('img')['src']).to eq "/#{project_path}/-/raw/#{Addressable::URI.escape(ref)}/#{escaped}"
filter/repository_link_filter_spec.rb:        .to eq "/#{project_path}/-/blob/#{ref}/doc/api/README%25.md"
filter/repository_link_filter_spec.rb:        expect(doc.at_css('a')['href']).to eq "/#{project_path}/-/blob/#{Addressable::URI.escape(ref)}/doc/api/users.md"
filter/repository_link_filter_spec.rb:        expect(doc.at_css('a')['href']).to eq "/#{project_path}/-/blob/#{Addressable::URI.escape(ref)}/doc/api/users.md"
filter/repository_link_filter_spec.rb:        expect(doc.at_css('a')['href']).to eq "/#{project_path}/-/blob/#{Addressable::URI.escape(ref)}/foo/bar/.gitkeep"
filter/repository_link_filter_spec.rb:          .to eq "/#{project_path}/-/raw/#{ref_escaped}/files/images/logo-black.png"
filter/repository_link_filter_spec.rb:        expect(doc.at_css('a')['href']).to eq "/#{project_path}/-/blob/#{Addressable::URI.escape(ref)}/with%20space/README.md"
filter/image_lazy_load_filter_spec.rb:    %(<img src="#{path}" />)
filter/image_lazy_load_filter_spec.rb:    %(<img src="#{path}" class="#{class_attr}"/>)
filter/truncate_visible_filter_spec.rb:    let(:markdown) { "Paragraph 1\n\nParagraph 2" }
filter/truncate_visible_filter_spec.rb:    let(:markdown) { "```\nCode block\nwith two lines\n```" }
filter/truncate_visible_filter_spec.rb:    let(:expected) { "Code block...</span></code>" }
filter/truncate_visible_filter_spec.rb:    let(:markdown) { "```ruby\ndef test\n  'hello world'\nend\n```" }
filter/truncate_visible_filter_spec.rb:      '<code><span id="LC1" class="line" lang="ruby">' \
filter/truncate_visible_filter_spec.rb:      '<span class="k">def</span> <span class="nf">test</span>...</span>'
filter/truncate_visible_filter_spec.rb:    markdown = "#{text}#{text}#{text} #{link_url}" # 163 chars
filter/truncate_visible_filter_spec.rb:    markdown = "@#{user.username}, can you look at this?\nHello world\n"
filter/truncate_visible_filter_spec.rb:    expect(doc.css('a')[0].text).to eq "@#{user.username}"
filter/truncate_visible_filter_spec.rb:    expect(doc.content).to eq "@#{user.username}, can you look at this?..."
filter/truncate_visible_filter_spec.rb:    markdown = "foo :wink:\nbar :grinning:"
filter/truncate_visible_filter_spec.rb:    expect(doc.content).to eq "foo 😉\nbar 😀"
filter/truncate_visible_filter_spec.rb:    markdown = "@#{user.username}, can you look at this?\nHello world"
filter/math_filter_spec.rb:  # Note that the "extensive" syntax testing for the new math filter
filter/math_filter_spec.rb:        expected = result_template.gsub('<math>', '<code data-math-style="inline" class="code math js-render-math">')
filter/math_filter_spec.rb:      let_it_be(:template_prefix_with_pre) { '<pre data-canonical-lang="math" data-math-style="display" class="js-render-math"><code>' }
filter/math_filter_spec.rb:      let_it_be(:template_prefix_with_code) { '<code data-math-style="display" class="code math js-render-math">' }
filter/math_filter_spec.rb:        template_suffix = "</code>#{'</pre>' if use_pre_tags}"
filter/math_filter_spec.rb:          "$$\n2+2\n$$"      | "<math>2+2\n</math>"
filter/math_filter_spec.rb:          "$$  \n2+2\n$$"    | "<math>2+2\n</math>"
filter/math_filter_spec.rb:          "$$\n2+2\n3+4\n$$" | "<math>2+2\n3+4\n</math>"
filter/math_filter_spec.rb:        let(:text) { "$$\n#{math}$$" }
filter/math_filter_spec.rb:        let(:result_template) { "<math>#{math}</math>" }
filter/math_filter_spec.rb:        let(:text) { "$$\n#{math}$$" }
filter/math_filter_spec.rb:        let(:result_template) { "<math>#{math}</math>" }
filter/math_filter_spec.rb:        doc = legacy_pipeline_filter("```math\n2+2\n```", context)
filter/math_filter_spec.rb:        doc = legacy_pipeline_filter("```math\n2+2\n```", context)
filter/math_filter_spec.rb:        expect(pre[:class]).to include("js-render-math")
filter/math_filter_spec.rb:        input = "```plaintext\n2+2\n```"
filter/math_filter_spec.rb:        expect(doc.to_s).to eq "<pre data-canonical-lang=\"plaintext\"><code>2+2\n</code></pre>"
filter/math_filter_spec.rb:        input = '<pre data-canonical-lang="math">something</pre>'
filter/math_filter_spec.rb:        "test $$\n2+2\n$$"    | "<p>test $$\n2+2\n$$</p>"
filter/math_filter_spec.rb:        "$\n$"                | "<p>$\n$</p>"
filter/math_filter_spec.rb:      expect(doc.search('[data-math-style="inline"]').count).to eq(2)
filter/math_filter_spec.rb:      expect(doc.search('[data-math-style="display"]').count).to eq(1)
filter/image_link_filter_spec.rb:    alt_tag = alt ? %(alt="#{alt}") : ""
filter/image_link_filter_spec.rb:    data_src_tag = data_src ? %(data-src="#{data_src}") : ""
filter/image_link_filter_spec.rb:    %(<img src="#{path}" #{alt_tag} #{data_src_tag} />)
filter/image_link_filter_spec.rb:    doc = filter(%(<a href="/whatever">#{image(path)}</a>), context)
filter/image_link_filter_spec.rb:    expect(doc.to_html).to match %r{^<a href="/whatever"><img[^>]*></a>$}
filter/image_link_filter_spec.rb:      %q(<img src="http://assets.example.com/6cd/4d7" data-canonical-src="http://example.com/test.png" />),
filter/image_link_filter_spec.rb:      %q(<img class="plantuml" src="http://localhost:8080/png/U9npoazIqBLJ24uiIbImKl18pSd91m0rkGMq" data-diagram="plantuml" data-diagram-src="data:text/plain;base64,Qm9iIC0+IFNhcmEgOiBIZWxsbw==">),
filter/image_link_filter_spec.rb:    expect(doc.at_css('a')['data-diagram']).to eq "plantuml"
filter/image_link_filter_spec.rb:    expect(doc.at_css('a')['data-diagram-src']).to eq "data:text/plain;base64,Qm9iIC0+IFNhcmEgOiBIZWxsbw=="
filter/upload_link_filter_spec.rb:    %(<img src="#{path}" />)
filter/upload_link_filter_spec.rb:    %(<video src="#{path}"></video>)
filter/upload_link_filter_spec.rb:    %(<audio src="#{path}"></audio>)
filter/upload_link_filter_spec.rb:    %(<a href="#{path}">#{path}</a>)
filter/upload_link_filter_spec.rb:  let(:relative_path) { "/-/project/#{project.id}#{upload_path}" }
filter/upload_link_filter_spec.rb:      expect(doc.at_css('a')['href']).to eq("/-/project/#{project.id}/uploads/%ED%95%9C%EA%B8%80.png")
filter/upload_link_filter_spec.rb:      expect(doc.at_css('img')['src']).to eq("/-/project/#{project.id}/uploads/%ED%95%9C%EA%B8%80.png")
filter/upload_link_filter_spec.rb:    let(:relative_path) { "/-/group/#{group.id}/uploads/e90decf88d8f96fe9e1389afc2e4a91f/test.jpg" }
filter/upload_link_filter_spec.rb:      'whitespace'                   | "d18213acd3732630991986120e167e3d/Landscape_8.jpg\nand more"
filter/upload_link_filter_spec.rb:      'null byte'                    | "%00"
filter/upload_link_filter_spec.rb:      it { expect { filter(link("/uploads/#{href}")) }.not_to raise_error }
filter/blockquote_fence_legacy_filter_spec.rb:    expect(filter(">>>\ntest\n>>>", context)).to eq("\n> test\n")
filter/blockquote_fence_legacy_filter_spec.rb:    expect(filter(">>> \ntest\n>>> ", context)).to eq("\n> test\n")
filter/blockquote_fence_legacy_filter_spec.rb:      test_string = ">>>#{"\n```\nfoo\n```" * 20}"
